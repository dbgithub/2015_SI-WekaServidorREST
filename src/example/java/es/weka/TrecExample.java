package es.weka;

import java.io.File;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;

import es.weka.Dataset;
import es.weka.Decider;
import es.weka.DeciderBuilder;
import es.weka.InstanceBuilder.BuildResponse;
import weka.classifiers.functions.SMO;
import weka.core.Instance;

public class TrecExample {

        private enum TrecFeatures {aeiou, abhorred, able, about, above, absolutely, access, account, achieve, acrobat, action, actually, add, address, adobe, advantage, after, again, age, aggresive, ago, agree, al, albert, alert, alice, all, allows, almost, alone, along, already, also, although, always, am, amazing, american, among, amount, an, anatrim, and, andrea, annoyed, another, antichrist, any, anyone, anything, anyway, anywhere, appetite, approaches, approved, april, are, area, arial, arms, around, art, article, articles, as, asatru, ask, asked, assume, at, ate, author, availability, available, away, b, back, bad, balance, bank, barnwell, based, bayonne, be, became, because, become, bed, been, before, began, behind, being, believe, below, benefit, best, better, between, beverage, big, bill, bird, bit, black, blend, blue, body, book, both, boy, boys, br, brand, brocker, broker, brought, bullish, business, but, buy, by, c, california, call, called, came, can, canadian, cannot, capital, care, casino, caught, cause, caused, cdyv, celtic, center, cents, century, chance, change, check, child, childhood, children, choice, choose, chose, christ, christian, christianity, christians, cialis, circle, city, click, climate, coffee, cold, com, come, comes, coming, comments, common, companies, company, compensation, competing, complete, computer, con, contact, continued, corporation, could, count, country, course, coyote, creative, culture, current, customer, customers, d, dangerous, dark, data, day, days, de, dead, deal, dear, debt, deceived, decided, deep, definitions, degree, del, delivery, depression, design, destroy, detested, did, difference, different, difficult, digital, directly, discussion, doctor, doctrines, does, doesna, doing, dona, done, dose, down, download, dr, drained, drive, drug, drugs, druidism, during, dysfunction, each, early, earth, east, eat, eating, ed, eden, effect, effective, effects, either, el, electronic, elegant, em, email, en, end, energy, enlargement, ennis, enough, enterprise, erectile, erection, erections, error, es, established, evanelists, evangelical, even, ever, every, everyone, everything, excellent, exercises, existed, expected, experience, exquisite, extra, eyes, face, fact, far, fast, fat, feel, feeling, feet, felt, few, field, fight, figure, filtered, find, fine, fire, first, fit, five, fiz, flesh, floor, following, food, forget, form, format, formula, fotografia, found, four, free, friday, friend, friends, from, full, further, future, g, gain, game, games, gasses, generic, get, getting, gift, girl, give, giving, go, god, goes, going, gone, good, got, government, granted, great, greenhouse, greenwood, group, groups, growing, growth, gte, had, half, hand, hands, hans, happiest, happy, hard, hardware, has, hate, have, he, head, headline, health, hear, heard, hellinic, help, helps, helvetica, her, herbal, here, heretic, hgh, high, highly, him, his, history, hold, holes, home, homemaker, hope, hormone, hot, hottest, hours, house, how, however, html, human, i, ich, idea, im, image, imagine, in, included, including, increased, industry, ineffective, influence, info, information, initiative, inline, instant, instantly, instead, interest, interested, internet, into, is, isn, isna, issue, it, item, items, its, jack, jesus, jo, join, judge, just, k, keep, kids, kilos, kinda, know, known, knows, l, la, large, largest, las, last, late, later, latest, lay, learn, leave, lenders, less, let, letter, level, levitra, li, life, light, like, line, lines, link, list, literally, little, live, lives, living, ll, local, located, longer, look, looked, looking, los, lose, losing, loss, lot, lots, love, low, lowest, m, mac, macromedia, made, main, maintaining, major, make, male, man, manager, manufacturer, manufacturers, many, march, market, marriage, matter, may, me, means, medications, medium, meds, meet, memory, men, meridia, met, microsoft, mid, middle, might, million, millions, mime, mind, minutes, miss, modern, mom, moment, money, monthly, months, mood, more, moreover, most, mother, mountain, mouse, moved, ms, mso, msonormal, much, music, must, my, myself, n, na, name, nation, national, natural, near, need, needed, needs, net, network, never, news, next, nice, night, no, none, nor, normal, north, nosave, nose, not, nothing, now, number, o, odm, oem, of, off, offer, offers, office, often, oh, old, on, once, one, ones, online, only, ont, opportunity, optical, or, order, other, others, our, out, over, overweight, own, p, paganism, page, paid, para, part, partners, passed, passive, past, paths, patients, pay, peace, penis, people, per, perfect, perfectly, perhaps, person, peter, pharmacies, pharmacy, pick, piece, pills, place, plan, planet, plant, play, please, pm, point, pointed, pollute, polly, popular, population, por, pose, possibly, posted, pounds, power, powerful, prescription, pretty, price, prices, printer, pro, problem, problems, procedures, product, products, professional, profit, program, propecia, propose, prosperous, provide, psycho, pumps, purchase, purple, put, quality, que, quick, quickly, quite, r, raise, range, rather, re, read, ready, real, realize, really, reboot, receive, received, record, red, ref, refinance, regards, regular, released, reliable, religions, religious, remember, replica, report, respond, response, result, results, reviews, rich, river, rock, roman, royal, run, running, s, safe, said, sales, same, sat, satisfaction, save, saved, say, sayreville, says, school, se, search, second, see, seem, seemed, seen, send, sense, sent, sentence, series, service, services, set, several, sex, sexual, shall, shamanism, share, she, shed, sheep, shipping, shoes, shook, shop, should, show, showed, side, sign, sin, since, sir, site, small, so, social, society, soft, software, solid, soma, some, something, soon, sounds, source, south, space, span, special, species, spirit, spirits, spiritual, spring, st, start, started, state, states, stay, steadily, step, still, stimulation, stood, stop, store, strange, street, strong, studio, style, subject, submit, such, suite, summer, sums, support, sure, sym, system, table, tablet, tabs, take, taking, talk, target, tax, taxes, techniques, technology, television, tell, terminology, th, than, thank, thanks, that, the, their, them, then, theories, there, these, they, thing, things, think, thinking, those, though, thought, thousands, threats, three, through, till, time, times, to, today, together, told, too, took, town, trade, tramadol, treat, treatment, trebuchet, tried, troubling, trying, turn, turned, turning, tutorials, tv, two, txp, u, ultimate, un, under, united, until, up, upon, upto, us, usdrugs, use, used, using, v, valued, ve, vegas, verdana, very, viagra, videos, views, village, vip, virtual, visit, vista, voice, wait, walking, want, war, was, waste, watch, watches, way, we, web, website, week, well, wendy, went, were, what, when, where, whether, which, white, who, whole, whom, whose, why, wiccan, wider, wife, will, windows, windowtext, wish, with, within, without, woman, won, wonder, word, words, work, workers, works, world, worldview, worldwide, worse, worst, would, write, www, y, year, years, yes, yesterday, yet, you, young, younger, your, yours, yourself, abbott, according, accuweather, actual, added, additional, administration, against, agreed, agreement, alerts, allocated, alter, america, analysis, annex, ap, apr, archaeologists, areas, arm, array, artifacts, atlanta, attempt, auto, baghdad, base, beach, begin, bhatia, blood, bob, bold, breaking, bruto, buffer, bug, build, built, bush, buttons, cable, cacheprime, calls, campaign, car, cars, cases, category, cbs, cbsnews, certain, cf, cgi, chairman, challenge, changed, changes, changeset, checking, cheers, clear, client, clients, close, clouds, cloudy, cnn, cochrane, code, commands, commented, commercial, committee, community, compile, conf, conference, configuration, configure, congress, connection, control, cool, copy, copyright, core, corp, correct, correspondence, countries, couple, court, create, created, criteria, cultural, currently, cut, daily, datasets, date, db, deadline, dealers, debian, decision, decreased, demand, democratic, democrats, department, dept, des, developing, development, devices, di, didmsg, didn, differential, directory, discuss, document, doesn, du, earlier, easier, easter, easy, echo, education, emailed, ensure, enter, entertainment, entry, environment, err, errors, et, etc, etch, evening, event, evidence, exactly, example, experts, f, factor, fd, fda, federal, file, files, fix, fixed, fixes, flag, flags, fog, force, forecast, foreign, former, fox, frame, fromfd, fta, function, functions, gas, general, george, georgia, gets, gif, given, global, gonzales, google, greater, green, greg, guess, guide, h, handle, having, hello, hi, hippo, hourly, hover, howstuffworks, htaccess, immediately, immigration, implementation, important, imus, inc, include, includes, independent, index, india, initial, innovative, inside, install, installed, institute, integration, intellectual, intended, interaction, interactive, internal, international, interp, intval, investor, iraq, issues, iteration, james, jeremy, jerry, john, johnson, kdawson, kernel, key, king, korea, korean, labor, lack, language, lapply, laptop, law, le, least, len, length, les, levels, levin, lib, library, likely, links, linux, listing, log, looks, lp, machine, machines, mailing, mainly, makes, making, manage, management, maps, margin, marketing, math, max, maybe, mclaren, medical, medicines, meeting, members, method, methods, michael, mike, minimal, mirror, model, modified, modify, module, modules, mon, monday, month, morning, mostly, multiple, museum, mydata, mylast, nav, nearly, newsletter, noshade, notify, nread, nuclear, num, ny, object, objects, offset, op, open, opere, option, options, org, output, ozone, packages, panel, par, parrot, particular, pass, patch, patent, path, paul, peach, percent, performance, period, perl, personalized, pharmaceutical, pharmaceuticals, planning, platform, plot, policy, political, pos, possible, post, posting, preference, preferences, president, presidential, pressure, pricing, principles, print, probably, process, produce, programs, project, property, provided, provision, provisions, push, question, questions, quote, rbind, readahead, reading, reads, reason, reasons, receiving, recent, recently, regression, related, relations, release, remove, replace, reproducible, republican, request, requirements, research, reserved, resolve, restrictions, returned, rev, review, revision, rights, road, room, row, rserve, rsize, samba, sans, sas, saturday, script, security, seems, select, senate, separate, server, settings, shareholder, sharpton, sheet, showbiz, shows, similar, simon, simple, single, sitelink, smb, snow, solve, someone, spatstat, specific, sportsline, standard, statement, statistical, stats, stock, stories, story, storylink, string, struct, student, subscribed, sugar, suggest, summary, sun, sunday, sunny, sunshine, systems, tahoma, takes, td, team, term, terms, test, tests, therefore, thursday, ticket, title, todo, tonight, tr, trouble, type, uintval, understand, understanding, une, university, unsigned, unsubscribe, update, uppercase, usa, useful, users, ustr, utc, utilities, utility, valuation, value, values, var, variable, variables, version, via, victory, video, view, visited, vol, w, warner, washington, ways, weather, websvn, weeks, whenever, width, win, worked, working, writes, written, wrong, wrote, x, york, zonk};
        private enum TrecClass {spam,ham} ;

        @SuppressWarnings({ "unchecked", "rawtypes" })
		public static String main(String[] args) throws Exception {
                //build a decider, which knows:
                // - what attributes are involved
                // - what data types these attributes are (in this case all numeric)
                // - what the expected output is (in this case, an enum, but numeric and binary is also doable)
                Decider<TrecFeatures,TrecClass> decider = 
                        new DeciderBuilder("TrecDecider", TrecFeatures.class)
                .setDefaultAttributeTypeNumeric()
                .setClassAttributeTypeEnum("$class$", TrecClass.class)
                .build();
                
                //load training data from file
                //this will check that attributes match TrecFeatures enum, that class attribute is named "class" and is of correct type, and so on.
                Dataset<TrecFeatures,TrecClass> dataset = decider.createNewDataset() ;
                dataset.load(new File("workspace/2015_SI-WekaServidorREST/src/example/resources/trecv3.arff")) ;
                

                //train a classifier using loaded training data.
                decider.train(new SMO(), dataset) ;

                //save the classifier so we could skip training in future
                //unfortunately this doesn't make any checks to see if classifier was trained on expected attributes
                //any idea how one would do that?
                decider.save(new File("workspace/2015_SI-WekaServidorREST/src/example/resources/trec.model"));

                //load the classifier saved previously
                //unfortunately this doesn't make any checks to see if classifier was trained on expected attributes
                decider.load(new File("workspace/2015_SI-WekaServidorREST/src/example/resources/trec.model"));
                
                String correo = "";
                //HAM
                //correo = "Hi...\n I have to use r to find out the confidence-interval for the sensitivity and specificity of the following diagnostic test: a particular diagnostic test for multiple sclerosis was conducted on  ms patients and  healthy subjects,  ms patients were classified as healthy and  healthy subjects were classified as suffering from the ms. Furthermore, I need to find the number of ms patients required for a sensitivity of is there a simple r-command which can do that for me? I am completely new to r... help please! View this message in context: sent from the r help mailing list archive at nabble.com. Mailing list please do read the posting guide and provide commented, minimal, self-contained, reproducible code.";
                //HAM
                //correo = "Hm... sounds like a homework problem to me... Maybe start by figuring out how to do it without r what\'s the approach, and how would you calculate it? Then search r help for the possible key words you came up with. Sarah on  jochen.f  wrote: Hi...I have to use r to find out the  confidence-interval for the sensitivity and specificity of the following diagnostic test: a particular diagnostic test for multiple sclerosis was conducted on ms  patients and  healthy subjects,  ms patients were classified as healthy and  healthy subjects were classified as suffering from the ms. Furthermore, I need to find the number of ms patients required for a sensitivity of is there a simple r-command which can do that for me? I am completely new to r... Help please! jochen Sarah goslee Mailing list Please do read the posting guide and provide commented, minimal, self-contained, reproducible code.";
                //HAM
                //correo = "Gruesse! V.Harishankar schrieb am I have a problem with my HP compaq laptop. Since upgrading to kernel  (currently running version on debian etch I\'ve been unable to get acpi to work on the machine. As a result i don\'t get any battery or ac status and the machine doesn\'t power off properly when i shut down. If you not already seen this: Regards, Hari Gru tGerhard Kernel panic: could not determine whether bit was one, zero or (j.k. in d-u-g) To unsubscribe, email to with a subject of \"unsubscribe\". Trouble? Contact.";
                //HAM LING-SPAM
                //correo = "Reminds me that some years ago I read, in a source now forgotten, a critique of some newsmagazines unique tendencies in writing style, most of which the writer found overly \"cute\". One item was tersely put down as follows: time's favorite: the colon. Lee hartman ga5123@siucvmb. Bitnet department of foreign languages southern illinois university carbondale, il 62901 u.s.a";
                //HAM LING-SPAM
                //correo = "Learning / Cultural empathya graduate student in education approached a colleague of mine with a query which linguist people may be able to help with. He is doing an evaluation of an exchange program with indonesia one object of which is to prepare more high school teachers of Indonesia here in Australia. He wondered if there is anything written on the correlation of degree of acquisition of an l2 with degree of empathy and participation in the culture of the l2 speakers. High involvement / skills might seem to be a good thing for teachers in both areas; however negative aspects might be there. Apparently there seems to be a correlation between development of good skills in the language and dropping out of teaching. Could this be due to \"culture shock\" on return to Australia of those who became most deeply immersed? Any references / ideas gratefully received. If there are a number, I could summarise. Patrick mcconvell, anthropology, northrn territory university, po box 40146, casuarina, nt 0811, Australia";
                //HAM LING-SPAM
                //correo = "Psycholinguistics teaching for an undergraduate course I will shortly be teaching in psycholinguistics, I would appreciate any suggestions as to texts which other instructors have had good experiences with. Also, I would be indebted if anyone can offer specific references to the work of helen neville on deaf alinguals and the acquisiton of asl. Thanks M. Klaiman ( klaiman @ umnacux . bitnet )";
                //HAM
                //correo = "Thank you for registering with refworks! Your login information is below. Please store this information for future reference. If you would like to change the login name and password or update your e-mail address select update user info from within the program. Subscriber group refworks login name Ronald password. Thank you for using refworks. For usage tracking purposes, email addresses of users accessing this service through their organization\'s subscription may be shared with the administrator of the account. To contact us with questions or comments, please email sincerely, refworks customer service code information: department-wide subscribers must enter the group code each time they login. Institution-wide subscribers logging into refworks from an authorized ip address (either directly or through a proxy server) do not need to use the group code. To login from outside of your institution\'s network, go to  and enter the group code above to access your institutionâ€™s subscription and your personal database. You cannot access your database with the above login name and password from the trial site without entering the group code.";
                //HAM
                //correo = "I have a question to everybody. After transfprmation, I have done ordinary kriging in gstat in r? I need to back trnasform the prediction values to orgiginal scale. How do I do this in gstat in r? Thanks zia zia uddin ahmed brad field hall department of crop and soil cornell university ithaca ny usa mailing list please do read the posting guide and provide commented, minimal, self-contained, reproducible code.";
                //HAM
                //correo = "I am writing some code to obtain publication-like plots (like the ones can be obtained with sigmaplot). I am not able to find the dimensions of a point. Parameters like cex make you able to make it bigger or smaller but I need to know the exact dimension (in relative coordinates: if my plot is  a dot plotted with  will be...) massimo cressoni mailing list please do read the posting guide and provide commented, minimal, self-contained, reproducible code.";
                //HAM
                //correo = "Hi,\n I had the same problem with build seems that the image is low on \'disk space\'. Log in at the console (root, no pw), and remove something from (I did about after that it should boot fine. Reinier Dan Williams wrote: On Sat, at Michael Tobis wrote: I am trying to install the emulator (build under parallels (build on os on an intel imac. I get tantalizingly close following the instructions at (to which I would only add that setting the vm to autostart and full-screen mode seems to get things just a tiny bit further.) I see the initial splash page, linux boots fine, but I never get sent back to a gui. I can login as root, and it sort of works as a console (the display goes black every few seconds). It also appears that the display environment variable is not set for what that\'s worth. Apparently x is not starting correctly. To diagnose that, we need a log. So log in as root. Then let x die and try to restart. When it dies again, quickly type \'init at the root shell to stop x. Then grab and attach that to a bug report in trac on dev.laptop.org. Dan I also repeatedly get a message that id respawning too fast; disabled for minutes any advice would be much appreciated. Michael Tobis.";
                //SPAM
                //correo = "Congrats! 1 year special cinema pass for 2 is yours. call 09061209465 now! C Suprman V, Matrix3, StarWars3, etc all 4 FREE! bx420-ip4-5we. 150pm. Dont miss out!";
                //SPAM
                //correo = "SMS. ac Sptv: The New Jersey Devils and the Detroit Red Wings play Ice Hockey. Correct or Incorrect? End? Reply END SPTV";
                //SPAM
                //correo = "Thanks for your subscription to Ringtone UK your mobile will be charged £5/month Please confirm by replying YES or NO. If you reply NO you will not be charged";
                //SPAM
                //correo = "URGENT! You have won a 1 week FREE membership in our £100,000 Prize Jackpot! Txt the word: CLAIM to No: 81010 T&C www.dbuk.net LCCLTD POBOX 4403LDNW1A7RW18";
                //SPAM
                //correo = "SIX chances to win CASH! From 100 to 20,000 pounds txt> CSH11 and send to 87575. Cost 150p/day, 6days, 16+ TsandCs apply Reply HL 4 info";
                //SPAM
                //correo = "Had your mobile 11 months or more? U R entitled to Update to the latest colour mobiles with camera for Free! Call The Mobile Update Co FREE on 08002986030";
                //SPAM
                //correo = "WINNER!! As a valued network customer you have been selected to receivea £900 prize reward! To claim call 09061701461. Claim code KL341. Valid 12 hours only.";
                //SPAM
                //correo = "FreeMsg Hey there darling it\'s been 3 week\'s now and no word back! I\'d like some fun you up for it still? Tb ok! XxX std chgs to send, £1.50 to rcv";
                //SPAM
                //correo = "Free entry in 2 a wkly comp to win FA Cup final tkts 21st May 2005. Text FA to 87121 to receive entry question(std txt rate)T&C\'s apply 08452810075over18\'s";
                //SPAM
                //correo = "To provide security assurances, asian trip, which kicked off with a said the united states will remain a reliable including counterfeiting and money announcement on oct. That it was prepared six-nation talks stalled a year ago when north is atop the agenda in most of the united states wants these talks to be successful, states for alleged illegal activities by its said the united states will remain a reliable six-nation talks stalled a year ago when north in liberalizing trade, confronting north korea\'s about washington\'s long-term commitment. At home after his republican party lost will not elections to anti-war, anti-free trade.";
                System.out.println(args[0]);
//        		correo = " " + correo.toLowerCase().replace("\n", " ").replace("\t", " ").replace(" \"", " ").replace("\" ", " ").replace(" ", "  ").replace(". ", " ").replace(", ", " ").replace(": ", " ").replace("; ", " ").replace(" ¿", " ").replace("? ", " ").replace(" ¡", " ").replace("! ", " ") + " ";
        		args[0] = " " + args[0].toLowerCase().replace("\n", " ").replace("\t", " ").replace(" \"", " ").replace("\" ", " ").replace(" ", "  ").replace(". ", " ").replace(", ", " ").replace(": ", " ").replace("; ", " ").replace(" ¿", " ").replace("? ", " ").replace(" ¡", " ").replace("! ", " ") + " ";

                //build an instance that we can classify
                //this will check that all attributes are set (optional) and that values are the correct type.
                Instance i = decider.getInstanceBuilder()
                .setAttributeMissingResponse(BuildResponse.THROW_ERROR)
                .setAttribute(TrecFeatures.aeiou, 0)
                .setAttribute(TrecFeatures.abhorred, contarPalabras(args[0], " abhorred "))
                .setAttribute(TrecFeatures.able, contarPalabras(args[0], " able "))
                .setAttribute(TrecFeatures.about, contarPalabras(args[0], " about "))
                .setAttribute(TrecFeatures.above, contarPalabras(args[0], " above "))
                .setAttribute(TrecFeatures.absolutely, contarPalabras(args[0], " absolutely "))
                .setAttribute(TrecFeatures.access, contarPalabras(args[0], " access "))
                .setAttribute(TrecFeatures.account, contarPalabras(args[0], " account "))
                .setAttribute(TrecFeatures.achieve, contarPalabras(args[0], " achieve "))
                .setAttribute(TrecFeatures.acrobat, contarPalabras(args[0], " acrobat "))
                .setAttribute(TrecFeatures.action, contarPalabras(args[0], " action "))
                .setAttribute(TrecFeatures.actually, contarPalabras(args[0], " actually "))
                .setAttribute(TrecFeatures.add, contarPalabras(args[0], " add "))
                .setAttribute(TrecFeatures.address, contarPalabras(args[0], " address "))
                .setAttribute(TrecFeatures.adobe, contarPalabras(args[0], " adobe "))
                .setAttribute(TrecFeatures.advantage, contarPalabras(args[0], " advantage "))
                .setAttribute(TrecFeatures.after, contarPalabras(args[0], " after "))
                .setAttribute(TrecFeatures.again, contarPalabras(args[0], " again "))
                .setAttribute(TrecFeatures.age, contarPalabras(args[0], " age "))
                .setAttribute(TrecFeatures.aggresive, contarPalabras(args[0], " aggresive "))
                .setAttribute(TrecFeatures.ago, contarPalabras(args[0], " ago "))
                .setAttribute(TrecFeatures.agree, contarPalabras(args[0], " agree "))
                .setAttribute(TrecFeatures.al, contarPalabras(args[0], " al "))
                .setAttribute(TrecFeatures.albert, contarPalabras(args[0], " albert "))
                .setAttribute(TrecFeatures.alert, contarPalabras(args[0], " alert "))
                .setAttribute(TrecFeatures.alice, contarPalabras(args[0], " alice "))
                .setAttribute(TrecFeatures.all, contarPalabras(args[0], " all "))
                .setAttribute(TrecFeatures.allows, contarPalabras(args[0], " allows "))
                .setAttribute(TrecFeatures.almost, contarPalabras(args[0], " almost "))
                .setAttribute(TrecFeatures.alone, contarPalabras(args[0], " alone "))
                .setAttribute(TrecFeatures.along, contarPalabras(args[0], " along "))
                .setAttribute(TrecFeatures.already, contarPalabras(args[0], " already "))
                .setAttribute(TrecFeatures.also, contarPalabras(args[0], " also "))
                .setAttribute(TrecFeatures.although, contarPalabras(args[0], " although "))
                .setAttribute(TrecFeatures.always, contarPalabras(args[0], " always "))
                .setAttribute(TrecFeatures.am, contarPalabras(args[0], " am "))
                .setAttribute(TrecFeatures.amazing, contarPalabras(args[0], " amazing "))
                .setAttribute(TrecFeatures.american, contarPalabras(args[0], " american "))
                .setAttribute(TrecFeatures.among, contarPalabras(args[0], " among "))
                .setAttribute(TrecFeatures.amount, contarPalabras(args[0], " amount "))
                .setAttribute(TrecFeatures.an, contarPalabras(args[0], " an "))
                .setAttribute(TrecFeatures.anatrim, contarPalabras(args[0], " anatrim "))
                .setAttribute(TrecFeatures.and, contarPalabras(args[0], " and "))
                .setAttribute(TrecFeatures.andrea, contarPalabras(args[0], " andrea "))
                .setAttribute(TrecFeatures.annoyed, contarPalabras(args[0], " annoyed "))
                .setAttribute(TrecFeatures.another, contarPalabras(args[0], " another "))
                .setAttribute(TrecFeatures.antichrist, contarPalabras(args[0], " antichrist "))
                .setAttribute(TrecFeatures.any, contarPalabras(args[0], " any "))
                .setAttribute(TrecFeatures.anyone, contarPalabras(args[0], " anyone "))
                .setAttribute(TrecFeatures.anything, contarPalabras(args[0], " anything "))
                .setAttribute(TrecFeatures.anyway, contarPalabras(args[0], " anyway "))
                .setAttribute(TrecFeatures.anywhere, contarPalabras(args[0], " anywhere "))
                .setAttribute(TrecFeatures.appetite, contarPalabras(args[0], " appetite "))
                .setAttribute(TrecFeatures.approaches, contarPalabras(args[0], " approaches "))
                .setAttribute(TrecFeatures.approved, contarPalabras(args[0], " approved "))
                .setAttribute(TrecFeatures.april, contarPalabras(args[0], " april "))
                .setAttribute(TrecFeatures.are, contarPalabras(args[0], " are "))
                .setAttribute(TrecFeatures.area, contarPalabras(args[0], " area "))
                .setAttribute(TrecFeatures.arial, contarPalabras(args[0], " arial "))
                .setAttribute(TrecFeatures.arms, contarPalabras(args[0], " arms "))
                .setAttribute(TrecFeatures.around, contarPalabras(args[0], " around "))
                .setAttribute(TrecFeatures.art, contarPalabras(args[0], " art "))
                .setAttribute(TrecFeatures.article, contarPalabras(args[0], " article "))
                .setAttribute(TrecFeatures.articles, contarPalabras(args[0], " articles "))
                .setAttribute(TrecFeatures.as, contarPalabras(args[0], " as "))
                .setAttribute(TrecFeatures.asatru, contarPalabras(args[0], " asatru "))
                .setAttribute(TrecFeatures.ask, contarPalabras(args[0], " ask "))
                .setAttribute(TrecFeatures.asked, contarPalabras(args[0], " asked "))
                .setAttribute(TrecFeatures.assume, contarPalabras(args[0], " assume "))
                .setAttribute(TrecFeatures.at, contarPalabras(args[0], " at "))
                .setAttribute(TrecFeatures.ate, contarPalabras(args[0], " ate "))
                .setAttribute(TrecFeatures.author, contarPalabras(args[0], " author "))
                .setAttribute(TrecFeatures.availability, contarPalabras(args[0], " availability "))
                .setAttribute(TrecFeatures.available, contarPalabras(args[0], " available "))
                .setAttribute(TrecFeatures.away, contarPalabras(args[0], " away "))
                .setAttribute(TrecFeatures.b, contarPalabras(args[0], " b "))
                .setAttribute(TrecFeatures.back, contarPalabras(args[0], " back "))
                .setAttribute(TrecFeatures.bad, contarPalabras(args[0], " bad "))
                .setAttribute(TrecFeatures.balance, contarPalabras(args[0], " balance "))
                .setAttribute(TrecFeatures.bank, contarPalabras(args[0], " bank "))
                .setAttribute(TrecFeatures.barnwell, contarPalabras(args[0], " barnwell "))
                .setAttribute(TrecFeatures.based, contarPalabras(args[0], " based "))
                .setAttribute(TrecFeatures.bayonne, contarPalabras(args[0], " bayonne "))
                .setAttribute(TrecFeatures.be, contarPalabras(args[0], " be "))
                .setAttribute(TrecFeatures.became, contarPalabras(args[0], " became "))
                .setAttribute(TrecFeatures.because, contarPalabras(args[0], " because "))
                .setAttribute(TrecFeatures.become, contarPalabras(args[0], " become "))
                .setAttribute(TrecFeatures.bed, contarPalabras(args[0], " bed "))
                .setAttribute(TrecFeatures.been, contarPalabras(args[0], " been "))
                .setAttribute(TrecFeatures.before, contarPalabras(args[0], " before "))
                .setAttribute(TrecFeatures.began, contarPalabras(args[0], " began "))
                .setAttribute(TrecFeatures.behind, contarPalabras(args[0], " behind "))
                .setAttribute(TrecFeatures.being, contarPalabras(args[0], " being "))
                .setAttribute(TrecFeatures.believe, contarPalabras(args[0], " believe "))
                .setAttribute(TrecFeatures.below, contarPalabras(args[0], " below "))
                .setAttribute(TrecFeatures.benefit, contarPalabras(args[0], " benefit "))
                .setAttribute(TrecFeatures.best, contarPalabras(args[0], " best "))
                .setAttribute(TrecFeatures.better, contarPalabras(args[0], " better "))
                .setAttribute(TrecFeatures.between, contarPalabras(args[0], " between "))
                .setAttribute(TrecFeatures.beverage, contarPalabras(args[0], " beverage "))
                .setAttribute(TrecFeatures.big, contarPalabras(args[0], " big "))
                .setAttribute(TrecFeatures.bill, contarPalabras(args[0], " bill "))
                .setAttribute(TrecFeatures.bird, contarPalabras(args[0], " bird "))
                .setAttribute(TrecFeatures.bit, contarPalabras(args[0], " bit "))
                .setAttribute(TrecFeatures.black, contarPalabras(args[0], " black "))
                .setAttribute(TrecFeatures.blend, contarPalabras(args[0], " blend "))
                .setAttribute(TrecFeatures.blue, contarPalabras(args[0], " blue "))
                .setAttribute(TrecFeatures.body, contarPalabras(args[0], " body "))
                .setAttribute(TrecFeatures.book, contarPalabras(args[0], " book "))
                .setAttribute(TrecFeatures.both, contarPalabras(args[0], " both "))
                .setAttribute(TrecFeatures.boy, contarPalabras(args[0], " boy "))
                .setAttribute(TrecFeatures.boys, contarPalabras(args[0], " boys "))
                .setAttribute(TrecFeatures.br, contarPalabras(args[0], " br "))
                .setAttribute(TrecFeatures.brand, contarPalabras(args[0], " brand "))
                .setAttribute(TrecFeatures.brocker, contarPalabras(args[0], " brocker "))
                .setAttribute(TrecFeatures.broker, contarPalabras(args[0], " broker "))
                .setAttribute(TrecFeatures.brought, contarPalabras(args[0], " brought "))
                .setAttribute(TrecFeatures.bullish, contarPalabras(args[0], " bullish "))
                .setAttribute(TrecFeatures.business, contarPalabras(args[0], " business "))
                .setAttribute(TrecFeatures.but, contarPalabras(args[0], " but "))
                .setAttribute(TrecFeatures.buy, contarPalabras(args[0], " buy "))
                .setAttribute(TrecFeatures.by, contarPalabras(args[0], " by "))
                .setAttribute(TrecFeatures.c, contarPalabras(args[0], " c "))
                .setAttribute(TrecFeatures.california, contarPalabras(args[0], " california "))
                .setAttribute(TrecFeatures.call, contarPalabras(args[0], " call "))
                .setAttribute(TrecFeatures.called, contarPalabras(args[0], " called "))
                .setAttribute(TrecFeatures.came, contarPalabras(args[0], " came "))
                .setAttribute(TrecFeatures.can, contarPalabras(args[0], " can "))
                .setAttribute(TrecFeatures.canadian, contarPalabras(args[0], " canadian "))
                .setAttribute(TrecFeatures.cannot, contarPalabras(args[0], " cannot "))
                .setAttribute(TrecFeatures.capital, contarPalabras(args[0], " capital "))
                .setAttribute(TrecFeatures.care, contarPalabras(args[0], " care "))
                .setAttribute(TrecFeatures.casino, contarPalabras(args[0], " casino "))
                .setAttribute(TrecFeatures.caught, contarPalabras(args[0], " caught "))
                .setAttribute(TrecFeatures.cause, contarPalabras(args[0], " cause "))
                .setAttribute(TrecFeatures.caused, contarPalabras(args[0], " caused "))
                .setAttribute(TrecFeatures.cdyv, contarPalabras(args[0], " cdyv "))
                .setAttribute(TrecFeatures.celtic, contarPalabras(args[0], " celtic "))
                .setAttribute(TrecFeatures.center, contarPalabras(args[0], " center "))
                .setAttribute(TrecFeatures.cents, contarPalabras(args[0], " cents "))
                .setAttribute(TrecFeatures.century, contarPalabras(args[0], " century "))
                .setAttribute(TrecFeatures.chance, contarPalabras(args[0], " chance "))
                .setAttribute(TrecFeatures.change, contarPalabras(args[0], " change "))
                .setAttribute(TrecFeatures.check, contarPalabras(args[0], " check "))
                .setAttribute(TrecFeatures.child, contarPalabras(args[0], " child "))
                .setAttribute(TrecFeatures.childhood, contarPalabras(args[0], " childhood "))
                .setAttribute(TrecFeatures.children, contarPalabras(args[0], " children "))
                .setAttribute(TrecFeatures.choice, contarPalabras(args[0], " choice "))
                .setAttribute(TrecFeatures.choose, contarPalabras(args[0], " choose "))
                .setAttribute(TrecFeatures.chose, contarPalabras(args[0], " chose "))
                .setAttribute(TrecFeatures.christ, contarPalabras(args[0], " christ "))
                .setAttribute(TrecFeatures.christian, contarPalabras(args[0], " christian "))
                .setAttribute(TrecFeatures.christianity, contarPalabras(args[0], " christianity "))
                .setAttribute(TrecFeatures.christians, contarPalabras(args[0], " christians "))
                .setAttribute(TrecFeatures.cialis, contarPalabras(args[0], " cialis "))
                .setAttribute(TrecFeatures.circle, contarPalabras(args[0], " circle "))
                .setAttribute(TrecFeatures.city, contarPalabras(args[0], " city "))
                .setAttribute(TrecFeatures.click, contarPalabras(args[0], " click "))
                .setAttribute(TrecFeatures.climate, contarPalabras(args[0], " climate "))
                .setAttribute(TrecFeatures.coffee, contarPalabras(args[0], " coffee "))
                .setAttribute(TrecFeatures.cold, contarPalabras(args[0], " cold "))
                .setAttribute(TrecFeatures.com, contarPalabras(args[0], " com "))
                .setAttribute(TrecFeatures.come, contarPalabras(args[0], " come "))
                .setAttribute(TrecFeatures.comes, contarPalabras(args[0], " comes "))
                .setAttribute(TrecFeatures.coming, contarPalabras(args[0], " coming "))
                .setAttribute(TrecFeatures.comments, contarPalabras(args[0], " comments "))
                .setAttribute(TrecFeatures.common, contarPalabras(args[0], " common "))
                .setAttribute(TrecFeatures.companies, contarPalabras(args[0], " companies "))
                .setAttribute(TrecFeatures.company, contarPalabras(args[0], " company "))
                .setAttribute(TrecFeatures.compensation, contarPalabras(args[0], " compensation "))
                .setAttribute(TrecFeatures.competing, contarPalabras(args[0], " competing "))
                .setAttribute(TrecFeatures.complete, contarPalabras(args[0], " complete "))
                .setAttribute(TrecFeatures.computer, contarPalabras(args[0], " computer "))
                .setAttribute(TrecFeatures.con, contarPalabras(args[0], " con "))
                .setAttribute(TrecFeatures.contact, contarPalabras(args[0], " contact "))
                .setAttribute(TrecFeatures.continued, contarPalabras(args[0], " continued "))
                .setAttribute(TrecFeatures.corporation, contarPalabras(args[0], " corporation "))
                .setAttribute(TrecFeatures.could, contarPalabras(args[0], " could "))
                .setAttribute(TrecFeatures.count, contarPalabras(args[0], " count "))
                .setAttribute(TrecFeatures.country, contarPalabras(args[0], " country "))
                .setAttribute(TrecFeatures.course, contarPalabras(args[0], " course "))
                .setAttribute(TrecFeatures.coyote, contarPalabras(args[0], " coyote "))
                .setAttribute(TrecFeatures.creative, contarPalabras(args[0], " creative "))
                .setAttribute(TrecFeatures.culture, contarPalabras(args[0], " culture "))
                .setAttribute(TrecFeatures.current, contarPalabras(args[0], " current "))
                .setAttribute(TrecFeatures.customer, contarPalabras(args[0], " customer "))
                .setAttribute(TrecFeatures.customers, contarPalabras(args[0], " customers "))
                .setAttribute(TrecFeatures.d, contarPalabras(args[0], " d "))
                .setAttribute(TrecFeatures.dangerous, contarPalabras(args[0], " dangerous "))
                .setAttribute(TrecFeatures.dark, contarPalabras(args[0], " dark "))
                .setAttribute(TrecFeatures.data, contarPalabras(args[0], " data "))
                .setAttribute(TrecFeatures.day, contarPalabras(args[0], " day "))
                .setAttribute(TrecFeatures.days, contarPalabras(args[0], " days "))
                .setAttribute(TrecFeatures.de, contarPalabras(args[0], " de "))
                .setAttribute(TrecFeatures.dead, contarPalabras(args[0], " dead "))
                .setAttribute(TrecFeatures.deal, contarPalabras(args[0], " deal "))
                .setAttribute(TrecFeatures.dear, contarPalabras(args[0], " dear "))
                .setAttribute(TrecFeatures.debt, contarPalabras(args[0], " debt "))
                .setAttribute(TrecFeatures.deceived, contarPalabras(args[0], " deceived "))
                .setAttribute(TrecFeatures.decided, contarPalabras(args[0], " decided "))
                .setAttribute(TrecFeatures.deep, contarPalabras(args[0], " deep "))
                .setAttribute(TrecFeatures.definitions, contarPalabras(args[0], " definitions "))
                .setAttribute(TrecFeatures.degree, contarPalabras(args[0], " degree "))
                .setAttribute(TrecFeatures.del, contarPalabras(args[0], " del "))
                .setAttribute(TrecFeatures.delivery, contarPalabras(args[0], " delivery "))
                .setAttribute(TrecFeatures.depression, contarPalabras(args[0], " depression "))
                .setAttribute(TrecFeatures.design, contarPalabras(args[0], " design "))
                .setAttribute(TrecFeatures.destroy, contarPalabras(args[0], " destroy "))
                .setAttribute(TrecFeatures.detested, contarPalabras(args[0], " detested "))
                .setAttribute(TrecFeatures.did, contarPalabras(args[0], " did "))
                .setAttribute(TrecFeatures.difference, contarPalabras(args[0], " difference "))
                .setAttribute(TrecFeatures.different, contarPalabras(args[0], " different "))
                .setAttribute(TrecFeatures.difficult, contarPalabras(args[0], " difficult "))
                .setAttribute(TrecFeatures.digital, contarPalabras(args[0], " digital "))
                .setAttribute(TrecFeatures.directly, contarPalabras(args[0], " directly "))
                .setAttribute(TrecFeatures.discussion, contarPalabras(args[0], " discussion "))
                .setAttribute(TrecFeatures.doctor, contarPalabras(args[0], " doctor "))
                .setAttribute(TrecFeatures.doctrines, contarPalabras(args[0], " doctrines "))
                .setAttribute(TrecFeatures.does, contarPalabras(args[0], " does "))
                .setAttribute(TrecFeatures.doesna, contarPalabras(args[0], " doesna "))
                .setAttribute(TrecFeatures.doing, contarPalabras(args[0], " doing "))
                .setAttribute(TrecFeatures.dona, contarPalabras(args[0], " dona "))
                .setAttribute(TrecFeatures.done, contarPalabras(args[0], " done "))
                .setAttribute(TrecFeatures.dose, contarPalabras(args[0], " dose "))
                .setAttribute(TrecFeatures.down, contarPalabras(args[0], " down "))
                .setAttribute(TrecFeatures.download, contarPalabras(args[0], " download "))
                .setAttribute(TrecFeatures.dr, contarPalabras(args[0], " dr "))
                .setAttribute(TrecFeatures.drained, contarPalabras(args[0], " drained "))
                .setAttribute(TrecFeatures.drive, contarPalabras(args[0], " drive "))
                .setAttribute(TrecFeatures.drug, contarPalabras(args[0], " drug "))
                .setAttribute(TrecFeatures.drugs, contarPalabras(args[0], " drugs "))
                .setAttribute(TrecFeatures.druidism, contarPalabras(args[0], " druidism "))
                .setAttribute(TrecFeatures.during, contarPalabras(args[0], " during "))
                .setAttribute(TrecFeatures.dysfunction, contarPalabras(args[0], " dysfunction "))
                .setAttribute(TrecFeatures.each, contarPalabras(args[0], " each "))
                .setAttribute(TrecFeatures.early, contarPalabras(args[0], " early "))
                .setAttribute(TrecFeatures.earth, contarPalabras(args[0], " earth "))
                .setAttribute(TrecFeatures.east, contarPalabras(args[0], " east "))
                .setAttribute(TrecFeatures.eat, contarPalabras(args[0], " eat "))
                .setAttribute(TrecFeatures.eating, contarPalabras(args[0], " eating "))
                .setAttribute(TrecFeatures.ed, contarPalabras(args[0], " ed "))
                .setAttribute(TrecFeatures.eden, contarPalabras(args[0], " eden "))
                .setAttribute(TrecFeatures.effect, contarPalabras(args[0], " effect "))
                .setAttribute(TrecFeatures.effective, contarPalabras(args[0], " effective "))
                .setAttribute(TrecFeatures.effects, contarPalabras(args[0], " effects "))
                .setAttribute(TrecFeatures.either, contarPalabras(args[0], " either "))
                .setAttribute(TrecFeatures.el, contarPalabras(args[0], " el "))
                .setAttribute(TrecFeatures.electronic, contarPalabras(args[0], " electronic "))
                .setAttribute(TrecFeatures.elegant, contarPalabras(args[0], " elegant "))
                .setAttribute(TrecFeatures.em, contarPalabras(args[0], " em "))
                .setAttribute(TrecFeatures.email, contarPalabras(args[0], " email "))
                .setAttribute(TrecFeatures.en, contarPalabras(args[0], " en "))
                .setAttribute(TrecFeatures.end, contarPalabras(args[0], " end "))
                .setAttribute(TrecFeatures.energy, contarPalabras(args[0], " energy "))
                .setAttribute(TrecFeatures.enlargement, contarPalabras(args[0], " enlargement "))
                .setAttribute(TrecFeatures.ennis, contarPalabras(args[0], " ennis "))
                .setAttribute(TrecFeatures.enough, contarPalabras(args[0], " enough "))
                .setAttribute(TrecFeatures.enterprise, contarPalabras(args[0], " enterprise "))
                .setAttribute(TrecFeatures.erectile, contarPalabras(args[0], " erectile "))
                .setAttribute(TrecFeatures.erection, contarPalabras(args[0], " erection "))
                .setAttribute(TrecFeatures.erections, contarPalabras(args[0], " erections "))
                .setAttribute(TrecFeatures.error, contarPalabras(args[0], " error "))
                .setAttribute(TrecFeatures.es, contarPalabras(args[0], " es "))
                .setAttribute(TrecFeatures.established, contarPalabras(args[0], " established "))
                .setAttribute(TrecFeatures.evanelists, contarPalabras(args[0], " evanelists "))
                .setAttribute(TrecFeatures.evangelical, contarPalabras(args[0], " evangelical "))
                .setAttribute(TrecFeatures.even, contarPalabras(args[0], " even "))
                .setAttribute(TrecFeatures.ever, contarPalabras(args[0], " ever "))
                .setAttribute(TrecFeatures.every, contarPalabras(args[0], " every "))
                .setAttribute(TrecFeatures.everyone, contarPalabras(args[0], " everyone "))
                .setAttribute(TrecFeatures.everything, contarPalabras(args[0], " everything "))
                .setAttribute(TrecFeatures.excellent, contarPalabras(args[0], " excellent "))
                .setAttribute(TrecFeatures.exercises, contarPalabras(args[0], " exercises "))
                .setAttribute(TrecFeatures.existed, contarPalabras(args[0], " existed "))
                .setAttribute(TrecFeatures.expected, contarPalabras(args[0], " expected "))
                .setAttribute(TrecFeatures.experience, contarPalabras(args[0], " experience "))
                .setAttribute(TrecFeatures.exquisite, contarPalabras(args[0], " exquisite "))
                .setAttribute(TrecFeatures.extra, contarPalabras(args[0], " extra "))
                .setAttribute(TrecFeatures.eyes, contarPalabras(args[0], " eyes "))
                .setAttribute(TrecFeatures.face, contarPalabras(args[0], " face "))
                .setAttribute(TrecFeatures.fact, contarPalabras(args[0], " fact "))
                .setAttribute(TrecFeatures.far, contarPalabras(args[0], " far "))
                .setAttribute(TrecFeatures.fast, contarPalabras(args[0], " fast "))
                .setAttribute(TrecFeatures.fat, contarPalabras(args[0], " fat "))
                .setAttribute(TrecFeatures.feel, contarPalabras(args[0], " feel "))
                .setAttribute(TrecFeatures.feeling, contarPalabras(args[0], " feeling "))
                .setAttribute(TrecFeatures.feet, contarPalabras(args[0], " feet "))
                .setAttribute(TrecFeatures.felt, contarPalabras(args[0], " felt "))
                .setAttribute(TrecFeatures.few, contarPalabras(args[0], " few "))
                .setAttribute(TrecFeatures.field, contarPalabras(args[0], " field "))
                .setAttribute(TrecFeatures.fight, contarPalabras(args[0], " fight "))
                .setAttribute(TrecFeatures.figure, contarPalabras(args[0], " figure "))
                .setAttribute(TrecFeatures.filtered, contarPalabras(args[0], " filtered "))
                .setAttribute(TrecFeatures.find, contarPalabras(args[0], " find "))
                .setAttribute(TrecFeatures.fine, contarPalabras(args[0], " fine "))
                .setAttribute(TrecFeatures.fire, contarPalabras(args[0], " fire "))
                .setAttribute(TrecFeatures.first, contarPalabras(args[0], " first "))
                .setAttribute(TrecFeatures.fit, contarPalabras(args[0], " fit "))
                .setAttribute(TrecFeatures.five, contarPalabras(args[0], " five "))
                .setAttribute(TrecFeatures.fiz, contarPalabras(args[0], " fiz "))
                .setAttribute(TrecFeatures.flesh, contarPalabras(args[0], " flesh "))
                .setAttribute(TrecFeatures.floor, contarPalabras(args[0], " floor "))
                .setAttribute(TrecFeatures.following, contarPalabras(args[0], " following "))
                .setAttribute(TrecFeatures.food, contarPalabras(args[0], " food "))
                .setAttribute(TrecFeatures.forget, contarPalabras(args[0], " forget "))
                .setAttribute(TrecFeatures.form, contarPalabras(args[0], " form "))
                .setAttribute(TrecFeatures.format, contarPalabras(args[0], " format "))
                .setAttribute(TrecFeatures.formula, contarPalabras(args[0], " formula "))
                .setAttribute(TrecFeatures.fotografia, contarPalabras(args[0], " fotografia "))
                .setAttribute(TrecFeatures.found, contarPalabras(args[0], " found "))
                .setAttribute(TrecFeatures.four, contarPalabras(args[0], " four "))
                .setAttribute(TrecFeatures.free, contarPalabras(args[0], " free "))
                .setAttribute(TrecFeatures.friday, contarPalabras(args[0], " friday "))
                .setAttribute(TrecFeatures.friend, contarPalabras(args[0], " friend "))
                .setAttribute(TrecFeatures.friends, contarPalabras(args[0], " friends "))
                .setAttribute(TrecFeatures.from, contarPalabras(args[0], " from "))
                .setAttribute(TrecFeatures.full, contarPalabras(args[0], " full "))
                .setAttribute(TrecFeatures.further, contarPalabras(args[0], " further "))
                .setAttribute(TrecFeatures.future, contarPalabras(args[0], " future "))
                .setAttribute(TrecFeatures.g, contarPalabras(args[0], " g "))
                .setAttribute(TrecFeatures.gain, contarPalabras(args[0], " gain "))
                .setAttribute(TrecFeatures.game, contarPalabras(args[0], " game "))
                .setAttribute(TrecFeatures.games, contarPalabras(args[0], " games "))
                .setAttribute(TrecFeatures.gasses, contarPalabras(args[0], " gasses "))
                .setAttribute(TrecFeatures.generic, contarPalabras(args[0], " generic "))
                .setAttribute(TrecFeatures.get, contarPalabras(args[0], " get "))
                .setAttribute(TrecFeatures.getting, contarPalabras(args[0], " getting "))
                .setAttribute(TrecFeatures.gift, contarPalabras(args[0], " gift "))
                .setAttribute(TrecFeatures.girl, contarPalabras(args[0], " girl "))
                .setAttribute(TrecFeatures.give, contarPalabras(args[0], " give "))
                .setAttribute(TrecFeatures.giving, contarPalabras(args[0], " giving "))
                .setAttribute(TrecFeatures.go, contarPalabras(args[0], " go "))
                .setAttribute(TrecFeatures.god, contarPalabras(args[0], " god "))
                .setAttribute(TrecFeatures.goes, contarPalabras(args[0], " goes "))
                .setAttribute(TrecFeatures.going, contarPalabras(args[0], " going "))
                .setAttribute(TrecFeatures.gone, contarPalabras(args[0], " gone "))
                .setAttribute(TrecFeatures.good, contarPalabras(args[0], " good "))
                .setAttribute(TrecFeatures.got, contarPalabras(args[0], " got "))
                .setAttribute(TrecFeatures.government, contarPalabras(args[0], " government "))
                .setAttribute(TrecFeatures.granted, contarPalabras(args[0], " granted "))
                .setAttribute(TrecFeatures.great, contarPalabras(args[0], " great "))
                .setAttribute(TrecFeatures.greenhouse, contarPalabras(args[0], " greenhouse "))
                .setAttribute(TrecFeatures.greenwood, contarPalabras(args[0], " greenwood "))
                .setAttribute(TrecFeatures.group, contarPalabras(args[0], " group "))
                .setAttribute(TrecFeatures.groups, contarPalabras(args[0], " groups "))
                .setAttribute(TrecFeatures.growing, contarPalabras(args[0], " growing "))
                .setAttribute(TrecFeatures.growth, contarPalabras(args[0], " growth "))
                .setAttribute(TrecFeatures.gte, contarPalabras(args[0], " gte "))
                .setAttribute(TrecFeatures.had, contarPalabras(args[0], " had "))
                .setAttribute(TrecFeatures.half, contarPalabras(args[0], " half "))
                .setAttribute(TrecFeatures.hand, contarPalabras(args[0], " hand "))
                .setAttribute(TrecFeatures.hands, contarPalabras(args[0], " hands "))
                .setAttribute(TrecFeatures.hans, contarPalabras(args[0], " hans "))
                .setAttribute(TrecFeatures.happiest, contarPalabras(args[0], " happiest "))
                .setAttribute(TrecFeatures.happy, contarPalabras(args[0], " happy "))
                .setAttribute(TrecFeatures.hard, contarPalabras(args[0], " hard "))
                .setAttribute(TrecFeatures.hardware, contarPalabras(args[0], " hardware "))
                .setAttribute(TrecFeatures.has, contarPalabras(args[0], " has "))
                .setAttribute(TrecFeatures.hate, contarPalabras(args[0], " hate "))
                .setAttribute(TrecFeatures.have, contarPalabras(args[0], " have "))
                .setAttribute(TrecFeatures.he, contarPalabras(args[0], " he "))
                .setAttribute(TrecFeatures.head, contarPalabras(args[0], " head "))
                .setAttribute(TrecFeatures.headline, contarPalabras(args[0], " headline "))
                .setAttribute(TrecFeatures.health, contarPalabras(args[0], " health "))
                .setAttribute(TrecFeatures.hear, contarPalabras(args[0], " hear "))
                .setAttribute(TrecFeatures.heard, contarPalabras(args[0], " heard "))
                .setAttribute(TrecFeatures.hellinic, contarPalabras(args[0], " hellinic "))
                .setAttribute(TrecFeatures.help, contarPalabras(args[0], " help "))
                .setAttribute(TrecFeatures.helps, contarPalabras(args[0], " helps "))
                .setAttribute(TrecFeatures.helvetica, contarPalabras(args[0], " helvetica "))
                .setAttribute(TrecFeatures.her, contarPalabras(args[0], " her "))
                .setAttribute(TrecFeatures.herbal, contarPalabras(args[0], " herbal "))
                .setAttribute(TrecFeatures.here, contarPalabras(args[0], " here "))
                .setAttribute(TrecFeatures.heretic, contarPalabras(args[0], " heretic "))
                .setAttribute(TrecFeatures.hgh, contarPalabras(args[0], " hgh "))
                .setAttribute(TrecFeatures.high, contarPalabras(args[0], " high "))
                .setAttribute(TrecFeatures.highly, contarPalabras(args[0], " highly "))
                .setAttribute(TrecFeatures.him, contarPalabras(args[0], " him "))
                .setAttribute(TrecFeatures.his, contarPalabras(args[0], " his "))
                .setAttribute(TrecFeatures.history, contarPalabras(args[0], " history "))
                .setAttribute(TrecFeatures.hold, contarPalabras(args[0], " hold "))
                .setAttribute(TrecFeatures.holes, contarPalabras(args[0], " holes "))
                .setAttribute(TrecFeatures.home, contarPalabras(args[0], " home "))
                .setAttribute(TrecFeatures.homemaker, contarPalabras(args[0], " homemaker "))
                .setAttribute(TrecFeatures.hope, contarPalabras(args[0], " hope "))
                .setAttribute(TrecFeatures.hormone, contarPalabras(args[0], " hormone "))
                .setAttribute(TrecFeatures.hot, contarPalabras(args[0], " hot "))
                .setAttribute(TrecFeatures.hottest, contarPalabras(args[0], " hottest "))
                .setAttribute(TrecFeatures.hours, contarPalabras(args[0], " hours "))
                .setAttribute(TrecFeatures.house, contarPalabras(args[0], " house "))
                .setAttribute(TrecFeatures.how, contarPalabras(args[0], " how "))
                .setAttribute(TrecFeatures.however, contarPalabras(args[0], " however "))
                .setAttribute(TrecFeatures.html, contarPalabras(args[0], " html "))
                .setAttribute(TrecFeatures.human, contarPalabras(args[0], " human "))
                .setAttribute(TrecFeatures.i, contarPalabras(args[0], " i "))
                .setAttribute(TrecFeatures.ich, contarPalabras(args[0], " ich "))
                .setAttribute(TrecFeatures.idea, contarPalabras(args[0], " idea "))
                .setAttribute(TrecFeatures.im, contarPalabras(args[0], " im "))
                .setAttribute(TrecFeatures.image, contarPalabras(args[0], " image "))
                .setAttribute(TrecFeatures.imagine, contarPalabras(args[0], " imagine "))
                .setAttribute(TrecFeatures.in, contarPalabras(args[0], " in "))
                .setAttribute(TrecFeatures.included, contarPalabras(args[0], " included "))
                .setAttribute(TrecFeatures.including, contarPalabras(args[0], " including "))
                .setAttribute(TrecFeatures.increased, contarPalabras(args[0], " increased "))
                .setAttribute(TrecFeatures.industry, contarPalabras(args[0], " industry "))
                .setAttribute(TrecFeatures.ineffective, contarPalabras(args[0], " ineffective "))
                .setAttribute(TrecFeatures.influence, contarPalabras(args[0], " influence "))
                .setAttribute(TrecFeatures.info, contarPalabras(args[0], " info "))
                .setAttribute(TrecFeatures.information, contarPalabras(args[0], " information "))
                .setAttribute(TrecFeatures.initiative, contarPalabras(args[0], " initiative "))
                .setAttribute(TrecFeatures.inline, contarPalabras(args[0], " inline "))
                .setAttribute(TrecFeatures.instant, contarPalabras(args[0], " instant "))
                .setAttribute(TrecFeatures.instantly, contarPalabras(args[0], " instantly "))
                .setAttribute(TrecFeatures.instead, contarPalabras(args[0], " instead "))
                .setAttribute(TrecFeatures.interest, contarPalabras(args[0], " interest "))
                .setAttribute(TrecFeatures.interested, contarPalabras(args[0], " interested "))
                .setAttribute(TrecFeatures.internet, contarPalabras(args[0], " internet "))
                .setAttribute(TrecFeatures.into, contarPalabras(args[0], " into "))
                .setAttribute(TrecFeatures.is, contarPalabras(args[0], " is "))
                .setAttribute(TrecFeatures.isn, contarPalabras(args[0], " isn "))
                .setAttribute(TrecFeatures.isna, contarPalabras(args[0], " isna "))
                .setAttribute(TrecFeatures.issue, contarPalabras(args[0], " issue "))
                .setAttribute(TrecFeatures.it, contarPalabras(args[0], " it "))
                .setAttribute(TrecFeatures.item, contarPalabras(args[0], " item "))
                .setAttribute(TrecFeatures.items, contarPalabras(args[0], " items "))
                .setAttribute(TrecFeatures.its, contarPalabras(args[0], " its "))
                .setAttribute(TrecFeatures.jack, contarPalabras(args[0], " jack "))
                .setAttribute(TrecFeatures.jesus, contarPalabras(args[0], " jesus "))
                .setAttribute(TrecFeatures.jo, contarPalabras(args[0], " jo "))
                .setAttribute(TrecFeatures.join, contarPalabras(args[0], " join "))
                .setAttribute(TrecFeatures.judge, contarPalabras(args[0], " judge "))
                .setAttribute(TrecFeatures.just, contarPalabras(args[0], " just "))
                .setAttribute(TrecFeatures.k, contarPalabras(args[0], " k "))
                .setAttribute(TrecFeatures.keep, contarPalabras(args[0], " keep "))
                .setAttribute(TrecFeatures.kids, contarPalabras(args[0], " kids "))
                .setAttribute(TrecFeatures.kilos, contarPalabras(args[0], " kilos "))
                .setAttribute(TrecFeatures.kinda, contarPalabras(args[0], " kinda "))
                .setAttribute(TrecFeatures.know, contarPalabras(args[0], " know "))
                .setAttribute(TrecFeatures.known, contarPalabras(args[0], " known "))
                .setAttribute(TrecFeatures.knows, contarPalabras(args[0], " knows "))
                .setAttribute(TrecFeatures.l, contarPalabras(args[0], " l "))
                .setAttribute(TrecFeatures.la, contarPalabras(args[0], " la "))
                .setAttribute(TrecFeatures.large, contarPalabras(args[0], " large "))
                .setAttribute(TrecFeatures.largest, contarPalabras(args[0], " largest "))
                .setAttribute(TrecFeatures.las, contarPalabras(args[0], " las "))
                .setAttribute(TrecFeatures.last, contarPalabras(args[0], " last "))
                .setAttribute(TrecFeatures.late, contarPalabras(args[0], " late "))
                .setAttribute(TrecFeatures.later, contarPalabras(args[0], " later "))
                .setAttribute(TrecFeatures.latest, contarPalabras(args[0], " latest "))
                .setAttribute(TrecFeatures.lay, contarPalabras(args[0], " lay "))
                .setAttribute(TrecFeatures.learn, contarPalabras(args[0], " learn "))
                .setAttribute(TrecFeatures.leave, contarPalabras(args[0], " leave "))
                .setAttribute(TrecFeatures.lenders, contarPalabras(args[0], " lenders "))
                .setAttribute(TrecFeatures.less, contarPalabras(args[0], " less "))
                .setAttribute(TrecFeatures.let, contarPalabras(args[0], " let "))
                .setAttribute(TrecFeatures.letter, contarPalabras(args[0], " letter "))
                .setAttribute(TrecFeatures.level, contarPalabras(args[0], " level "))
                .setAttribute(TrecFeatures.levitra, contarPalabras(args[0], " levitra "))
                .setAttribute(TrecFeatures.li, contarPalabras(args[0], " li "))
                .setAttribute(TrecFeatures.life, contarPalabras(args[0], " life "))
                .setAttribute(TrecFeatures.light, contarPalabras(args[0], " light "))
                .setAttribute(TrecFeatures.like, contarPalabras(args[0], " like "))
                .setAttribute(TrecFeatures.line, contarPalabras(args[0], " line "))
                .setAttribute(TrecFeatures.lines, contarPalabras(args[0], " lines "))
                .setAttribute(TrecFeatures.link, contarPalabras(args[0], " link "))
                .setAttribute(TrecFeatures.list, contarPalabras(args[0], " list "))
                .setAttribute(TrecFeatures.literally, contarPalabras(args[0], " literally "))
                .setAttribute(TrecFeatures.little, contarPalabras(args[0], " little "))
                .setAttribute(TrecFeatures.live, contarPalabras(args[0], " live "))
                .setAttribute(TrecFeatures.lives, contarPalabras(args[0], " lives "))
                .setAttribute(TrecFeatures.living, contarPalabras(args[0], " living "))
                .setAttribute(TrecFeatures.ll, contarPalabras(args[0], " ll "))
                .setAttribute(TrecFeatures.local, contarPalabras(args[0], " local "))
                .setAttribute(TrecFeatures.located, contarPalabras(args[0], " located "))
                .setAttribute(TrecFeatures.longer, contarPalabras(args[0], " longer "))
                .setAttribute(TrecFeatures.look, contarPalabras(args[0], " look "))
                .setAttribute(TrecFeatures.looked, contarPalabras(args[0], " looked "))
                .setAttribute(TrecFeatures.looking, contarPalabras(args[0], " looking "))
                .setAttribute(TrecFeatures.los, contarPalabras(args[0], " los "))
                .setAttribute(TrecFeatures.lose, contarPalabras(args[0], " lose "))
                .setAttribute(TrecFeatures.losing, contarPalabras(args[0], " losing "))
                .setAttribute(TrecFeatures.loss, contarPalabras(args[0], " loss "))
                .setAttribute(TrecFeatures.lot, contarPalabras(args[0], " lot "))
                .setAttribute(TrecFeatures.lots, contarPalabras(args[0], " lots "))
                .setAttribute(TrecFeatures.love, contarPalabras(args[0], " love "))
                .setAttribute(TrecFeatures.low, contarPalabras(args[0], " low "))
                .setAttribute(TrecFeatures.lowest, contarPalabras(args[0], " lowest "))
                .setAttribute(TrecFeatures.m, contarPalabras(args[0], " m "))
                .setAttribute(TrecFeatures.mac, contarPalabras(args[0], " mac "))
                .setAttribute(TrecFeatures.macromedia, contarPalabras(args[0], " macromedia "))
                .setAttribute(TrecFeatures.made, contarPalabras(args[0], " made "))
                .setAttribute(TrecFeatures.main, contarPalabras(args[0], " main "))
                .setAttribute(TrecFeatures.maintaining, contarPalabras(args[0], " maintaining "))
                .setAttribute(TrecFeatures.major, contarPalabras(args[0], " major "))
                .setAttribute(TrecFeatures.make, contarPalabras(args[0], " make "))
                .setAttribute(TrecFeatures.male, contarPalabras(args[0], " male "))
                .setAttribute(TrecFeatures.man, contarPalabras(args[0], " man "))
                .setAttribute(TrecFeatures.manager, contarPalabras(args[0], " manager "))
                .setAttribute(TrecFeatures.manufacturer, contarPalabras(args[0], " manufacturer "))
                .setAttribute(TrecFeatures.manufacturers, contarPalabras(args[0], " manufacturers "))
                .setAttribute(TrecFeatures.many, contarPalabras(args[0], " many "))
                .setAttribute(TrecFeatures.march, contarPalabras(args[0], " march "))
                .setAttribute(TrecFeatures.market, contarPalabras(args[0], " market "))
                .setAttribute(TrecFeatures.marriage, contarPalabras(args[0], " marriage "))
                .setAttribute(TrecFeatures.matter, contarPalabras(args[0], " matter "))
                .setAttribute(TrecFeatures.may, contarPalabras(args[0], " may "))
                .setAttribute(TrecFeatures.me, contarPalabras(args[0], " me "))
                .setAttribute(TrecFeatures.means, contarPalabras(args[0], " means "))
                .setAttribute(TrecFeatures.medications, contarPalabras(args[0], " medications "))
                .setAttribute(TrecFeatures.medium, contarPalabras(args[0], " medium "))
                .setAttribute(TrecFeatures.meds, contarPalabras(args[0], " meds "))
                .setAttribute(TrecFeatures.meet, contarPalabras(args[0], " meet "))
                .setAttribute(TrecFeatures.memory, contarPalabras(args[0], " memory "))
                .setAttribute(TrecFeatures.men, contarPalabras(args[0], " men "))
                .setAttribute(TrecFeatures.meridia, contarPalabras(args[0], " meridia "))
                .setAttribute(TrecFeatures.met, contarPalabras(args[0], " met "))
                .setAttribute(TrecFeatures.microsoft, contarPalabras(args[0], " microsoft "))
                .setAttribute(TrecFeatures.mid, contarPalabras(args[0], " mid "))
                .setAttribute(TrecFeatures.middle, contarPalabras(args[0], " middle "))
                .setAttribute(TrecFeatures.might, contarPalabras(args[0], " might "))
                .setAttribute(TrecFeatures.million, contarPalabras(args[0], " million "))
                .setAttribute(TrecFeatures.millions, contarPalabras(args[0], " millions "))
                .setAttribute(TrecFeatures.mime, contarPalabras(args[0], " mime "))
                .setAttribute(TrecFeatures.mind, contarPalabras(args[0], " mind "))
                .setAttribute(TrecFeatures.minutes, contarPalabras(args[0], " minutes "))
                .setAttribute(TrecFeatures.miss, contarPalabras(args[0], " miss "))
                .setAttribute(TrecFeatures.modern, contarPalabras(args[0], " modern "))
                .setAttribute(TrecFeatures.mom, contarPalabras(args[0], " mom "))
                .setAttribute(TrecFeatures.moment, contarPalabras(args[0], " moment "))
                .setAttribute(TrecFeatures.money, contarPalabras(args[0], " money "))
                .setAttribute(TrecFeatures.monthly, contarPalabras(args[0], " monthly "))
                .setAttribute(TrecFeatures.months, contarPalabras(args[0], " months "))
                .setAttribute(TrecFeatures.mood, contarPalabras(args[0], " mood "))
                .setAttribute(TrecFeatures.more, contarPalabras(args[0], " more "))
                .setAttribute(TrecFeatures.moreover, contarPalabras(args[0], " moreover "))
                .setAttribute(TrecFeatures.most, contarPalabras(args[0], " most "))
                .setAttribute(TrecFeatures.mother, contarPalabras(args[0], " mother "))
                .setAttribute(TrecFeatures.mountain, contarPalabras(args[0], " mountain "))
                .setAttribute(TrecFeatures.mouse, contarPalabras(args[0], " mouse "))
                .setAttribute(TrecFeatures.moved, contarPalabras(args[0], " moved "))
                .setAttribute(TrecFeatures.ms, contarPalabras(args[0], " ms "))
                .setAttribute(TrecFeatures.mso, contarPalabras(args[0], " mso "))
                .setAttribute(TrecFeatures.msonormal, contarPalabras(args[0], " msonormal "))
                .setAttribute(TrecFeatures.much, contarPalabras(args[0], " much "))
                .setAttribute(TrecFeatures.music, contarPalabras(args[0], " music "))
                .setAttribute(TrecFeatures.must, contarPalabras(args[0], " must "))
                .setAttribute(TrecFeatures.my, contarPalabras(args[0], " my "))
                .setAttribute(TrecFeatures.myself, contarPalabras(args[0], " myself "))
                .setAttribute(TrecFeatures.n, contarPalabras(args[0], " n "))
                .setAttribute(TrecFeatures.na, contarPalabras(args[0], " na "))
                .setAttribute(TrecFeatures.name, contarPalabras(args[0], " name "))
                .setAttribute(TrecFeatures.nation, contarPalabras(args[0], " nation "))
                .setAttribute(TrecFeatures.national, contarPalabras(args[0], " national "))
                .setAttribute(TrecFeatures.natural, contarPalabras(args[0], " natural "))
                .setAttribute(TrecFeatures.near, contarPalabras(args[0], " near "))
                .setAttribute(TrecFeatures.need, contarPalabras(args[0], " need "))
                .setAttribute(TrecFeatures.needed, contarPalabras(args[0], " needed "))
                .setAttribute(TrecFeatures.needs, contarPalabras(args[0], " needs "))
                .setAttribute(TrecFeatures.net, contarPalabras(args[0], " net "))
                .setAttribute(TrecFeatures.network, contarPalabras(args[0], " network "))
                .setAttribute(TrecFeatures.never, contarPalabras(args[0], " never "))
                .setAttribute(TrecFeatures.news, contarPalabras(args[0], " news "))
                .setAttribute(TrecFeatures.next, contarPalabras(args[0], " next "))
                .setAttribute(TrecFeatures.nice, contarPalabras(args[0], " nice "))
                .setAttribute(TrecFeatures.night, contarPalabras(args[0], " night "))
                .setAttribute(TrecFeatures.no, contarPalabras(args[0], " no "))
                .setAttribute(TrecFeatures.none, contarPalabras(args[0], " none "))
                .setAttribute(TrecFeatures.nor, contarPalabras(args[0], " nor "))
                .setAttribute(TrecFeatures.normal, contarPalabras(args[0], " normal "))
                .setAttribute(TrecFeatures.north, contarPalabras(args[0], " north "))
                .setAttribute(TrecFeatures.nosave, contarPalabras(args[0], " nosave "))
                .setAttribute(TrecFeatures.nose, contarPalabras(args[0], " nose "))
                .setAttribute(TrecFeatures.not, contarPalabras(args[0], " not "))
                .setAttribute(TrecFeatures.nothing, contarPalabras(args[0], " nothing "))
                .setAttribute(TrecFeatures.now, contarPalabras(args[0], " now "))
                .setAttribute(TrecFeatures.number, contarPalabras(args[0], " number "))
                .setAttribute(TrecFeatures.o, contarPalabras(args[0], " o "))
                .setAttribute(TrecFeatures.odm, contarPalabras(args[0], " odm "))
                .setAttribute(TrecFeatures.oem, contarPalabras(args[0], " oem "))
                .setAttribute(TrecFeatures.of, contarPalabras(args[0], " of "))
                .setAttribute(TrecFeatures.off, contarPalabras(args[0], " off "))
                .setAttribute(TrecFeatures.offer, contarPalabras(args[0], " offer "))
                .setAttribute(TrecFeatures.offers, contarPalabras(args[0], " offers "))
                .setAttribute(TrecFeatures.office, contarPalabras(args[0], " office "))
                .setAttribute(TrecFeatures.often, contarPalabras(args[0], " often "))
                .setAttribute(TrecFeatures.oh, contarPalabras(args[0], " oh "))
                .setAttribute(TrecFeatures.old, contarPalabras(args[0], " old "))
                .setAttribute(TrecFeatures.on, contarPalabras(args[0], " on "))
                .setAttribute(TrecFeatures.once, contarPalabras(args[0], " once "))
                .setAttribute(TrecFeatures.one, contarPalabras(args[0], " one "))
                .setAttribute(TrecFeatures.ones, contarPalabras(args[0], " ones "))
                .setAttribute(TrecFeatures.online, contarPalabras(args[0], " online "))
                .setAttribute(TrecFeatures.only, contarPalabras(args[0], " only "))
                .setAttribute(TrecFeatures.ont, contarPalabras(args[0], " ont "))
                .setAttribute(TrecFeatures.opportunity, contarPalabras(args[0], " opportunity "))
                .setAttribute(TrecFeatures.optical, contarPalabras(args[0], " optical "))
                .setAttribute(TrecFeatures.or, contarPalabras(args[0], " or "))
                .setAttribute(TrecFeatures.order, contarPalabras(args[0], " order "))
                .setAttribute(TrecFeatures.other, contarPalabras(args[0], " other "))
                .setAttribute(TrecFeatures.others, contarPalabras(args[0], " others "))
                .setAttribute(TrecFeatures.our, contarPalabras(args[0], " our "))
                .setAttribute(TrecFeatures.out, contarPalabras(args[0], " out "))
                .setAttribute(TrecFeatures.over, contarPalabras(args[0], " over "))
                .setAttribute(TrecFeatures.overweight, contarPalabras(args[0], " overweight "))
                .setAttribute(TrecFeatures.own, contarPalabras(args[0], " own "))
                .setAttribute(TrecFeatures.p, contarPalabras(args[0], " p "))
                .setAttribute(TrecFeatures.paganism, contarPalabras(args[0], " paganism "))
                .setAttribute(TrecFeatures.page, contarPalabras(args[0], " page "))
                .setAttribute(TrecFeatures.paid, contarPalabras(args[0], " paid "))
                .setAttribute(TrecFeatures.para, contarPalabras(args[0], " para "))
                .setAttribute(TrecFeatures.part, contarPalabras(args[0], " part "))
                .setAttribute(TrecFeatures.partners, contarPalabras(args[0], " partners "))
                .setAttribute(TrecFeatures.passed, contarPalabras(args[0], " passed "))
                .setAttribute(TrecFeatures.passive, contarPalabras(args[0], " passive "))
                .setAttribute(TrecFeatures.past, contarPalabras(args[0], " past "))
                .setAttribute(TrecFeatures.paths, contarPalabras(args[0], " paths "))
                .setAttribute(TrecFeatures.patients, contarPalabras(args[0], " patients "))
                .setAttribute(TrecFeatures.pay, contarPalabras(args[0], " pay "))
                .setAttribute(TrecFeatures.peace, contarPalabras(args[0], " peace "))
                .setAttribute(TrecFeatures.penis, contarPalabras(args[0], " penis "))
                .setAttribute(TrecFeatures.people, contarPalabras(args[0], " people "))
                .setAttribute(TrecFeatures.per, contarPalabras(args[0], " per "))
                .setAttribute(TrecFeatures.perfect, contarPalabras(args[0], " perfect "))
                .setAttribute(TrecFeatures.perfectly, contarPalabras(args[0], " perfectly "))
                .setAttribute(TrecFeatures.perhaps, contarPalabras(args[0], " perhaps "))
                .setAttribute(TrecFeatures.person, contarPalabras(args[0], " person "))
                .setAttribute(TrecFeatures.peter, contarPalabras(args[0], " peter "))
                .setAttribute(TrecFeatures.pharmacies, contarPalabras(args[0], " pharmacies "))
                .setAttribute(TrecFeatures.pharmacy, contarPalabras(args[0], " pharmacy "))
                .setAttribute(TrecFeatures.pick, contarPalabras(args[0], " pick "))
                .setAttribute(TrecFeatures.piece, contarPalabras(args[0], " piece "))
                .setAttribute(TrecFeatures.pills, contarPalabras(args[0], " pills "))
                .setAttribute(TrecFeatures.place, contarPalabras(args[0], " place "))
                .setAttribute(TrecFeatures.plan, contarPalabras(args[0], " plan "))
                .setAttribute(TrecFeatures.planet, contarPalabras(args[0], " planet "))
                .setAttribute(TrecFeatures.plant, contarPalabras(args[0], " plant "))
                .setAttribute(TrecFeatures.play, contarPalabras(args[0], " play "))
                .setAttribute(TrecFeatures.please, contarPalabras(args[0], " please "))
                .setAttribute(TrecFeatures.pm, contarPalabras(args[0], " pm "))
                .setAttribute(TrecFeatures.point, contarPalabras(args[0], " point "))
                .setAttribute(TrecFeatures.pointed, contarPalabras(args[0], " pointed "))
                .setAttribute(TrecFeatures.pollute, contarPalabras(args[0], " pollute "))
                .setAttribute(TrecFeatures.polly, contarPalabras(args[0], " polly "))
                .setAttribute(TrecFeatures.popular, contarPalabras(args[0], " popular "))
                .setAttribute(TrecFeatures.population, contarPalabras(args[0], " population "))
                .setAttribute(TrecFeatures.por, contarPalabras(args[0], " por "))
                .setAttribute(TrecFeatures.pose, contarPalabras(args[0], " pose "))
                .setAttribute(TrecFeatures.possibly, contarPalabras(args[0], " possibly "))
                .setAttribute(TrecFeatures.posted, contarPalabras(args[0], " posted "))
                .setAttribute(TrecFeatures.pounds, contarPalabras(args[0], " pounds "))
                .setAttribute(TrecFeatures.power, contarPalabras(args[0], " power "))
                .setAttribute(TrecFeatures.powerful, contarPalabras(args[0], " powerful "))
                .setAttribute(TrecFeatures.prescription, contarPalabras(args[0], " prescription "))
                .setAttribute(TrecFeatures.pretty, contarPalabras(args[0], " pretty "))
                .setAttribute(TrecFeatures.price, contarPalabras(args[0], " price "))
                .setAttribute(TrecFeatures.prices, contarPalabras(args[0], " prices "))
                .setAttribute(TrecFeatures.printer, contarPalabras(args[0], " printer "))
                .setAttribute(TrecFeatures.pro, contarPalabras(args[0], " pro "))
                .setAttribute(TrecFeatures.problem, contarPalabras(args[0], " problem "))
                .setAttribute(TrecFeatures.problems, contarPalabras(args[0], " problems "))
                .setAttribute(TrecFeatures.procedures, contarPalabras(args[0], " procedures "))
                .setAttribute(TrecFeatures.product, contarPalabras(args[0], " product "))
                .setAttribute(TrecFeatures.products, contarPalabras(args[0], " products "))
                .setAttribute(TrecFeatures.professional, contarPalabras(args[0], " professional "))
                .setAttribute(TrecFeatures.profit, contarPalabras(args[0], " profit "))
                .setAttribute(TrecFeatures.program, contarPalabras(args[0], " program "))
                .setAttribute(TrecFeatures.propecia, contarPalabras(args[0], " propecia "))
                .setAttribute(TrecFeatures.propose, contarPalabras(args[0], " propose "))
                .setAttribute(TrecFeatures.prosperous, contarPalabras(args[0], " prosperous "))
                .setAttribute(TrecFeatures.provide, contarPalabras(args[0], " provide "))
                .setAttribute(TrecFeatures.psycho, contarPalabras(args[0], " psycho "))
                .setAttribute(TrecFeatures.pumps, contarPalabras(args[0], " pumps "))
                .setAttribute(TrecFeatures.purchase, contarPalabras(args[0], " purchase "))
                .setAttribute(TrecFeatures.purple, contarPalabras(args[0], " purple "))
                .setAttribute(TrecFeatures.put, contarPalabras(args[0], " put "))
                .setAttribute(TrecFeatures.quality, contarPalabras(args[0], " quality "))
                .setAttribute(TrecFeatures.que, contarPalabras(args[0], " que "))
                .setAttribute(TrecFeatures.quick, contarPalabras(args[0], " quick "))
                .setAttribute(TrecFeatures.quickly, contarPalabras(args[0], " quickly "))
                .setAttribute(TrecFeatures.quite, contarPalabras(args[0], " quite "))
                .setAttribute(TrecFeatures.r, contarPalabras(args[0], " r "))
                .setAttribute(TrecFeatures.raise, contarPalabras(args[0], " raise "))
                .setAttribute(TrecFeatures.range, contarPalabras(args[0], " range "))
                .setAttribute(TrecFeatures.rather, contarPalabras(args[0], " rather "))
                .setAttribute(TrecFeatures.re, contarPalabras(args[0], " re "))
                .setAttribute(TrecFeatures.read, contarPalabras(args[0], " read "))
                .setAttribute(TrecFeatures.ready, contarPalabras(args[0], " ready "))
                .setAttribute(TrecFeatures.real, contarPalabras(args[0], " real "))
                .setAttribute(TrecFeatures.realize, contarPalabras(args[0], " realize "))
                .setAttribute(TrecFeatures.really, contarPalabras(args[0], " really "))
                .setAttribute(TrecFeatures.reboot, contarPalabras(args[0], " reboot "))
                .setAttribute(TrecFeatures.receive, contarPalabras(args[0], " receive "))
                .setAttribute(TrecFeatures.received, contarPalabras(args[0], " received "))
                .setAttribute(TrecFeatures.record, contarPalabras(args[0], " record "))
                .setAttribute(TrecFeatures.red, contarPalabras(args[0], " red "))
                .setAttribute(TrecFeatures.ref, contarPalabras(args[0], " ref "))
                .setAttribute(TrecFeatures.refinance, contarPalabras(args[0], " refinance "))
                .setAttribute(TrecFeatures.regards, contarPalabras(args[0], " regards "))
                .setAttribute(TrecFeatures.regular, contarPalabras(args[0], " regular "))
                .setAttribute(TrecFeatures.released, contarPalabras(args[0], " released "))
                .setAttribute(TrecFeatures.reliable, contarPalabras(args[0], " reliable "))
                .setAttribute(TrecFeatures.religions, contarPalabras(args[0], " religions "))
                .setAttribute(TrecFeatures.religious, contarPalabras(args[0], " religious "))
                .setAttribute(TrecFeatures.remember, contarPalabras(args[0], " remember "))
                .setAttribute(TrecFeatures.replica, contarPalabras(args[0], " replica "))
                .setAttribute(TrecFeatures.report, contarPalabras(args[0], " report "))
                .setAttribute(TrecFeatures.respond, contarPalabras(args[0], " respond "))
                .setAttribute(TrecFeatures.response, contarPalabras(args[0], " response "))
                .setAttribute(TrecFeatures.result, contarPalabras(args[0], " result "))
                .setAttribute(TrecFeatures.results, contarPalabras(args[0], " results "))
                .setAttribute(TrecFeatures.reviews, contarPalabras(args[0], " reviews "))
                .setAttribute(TrecFeatures.rich, contarPalabras(args[0], " rich "))
                .setAttribute(TrecFeatures.river, contarPalabras(args[0], " river "))
                .setAttribute(TrecFeatures.rock, contarPalabras(args[0], " rock "))
                .setAttribute(TrecFeatures.roman, contarPalabras(args[0], " roman "))
                .setAttribute(TrecFeatures.royal, contarPalabras(args[0], " royal "))
                .setAttribute(TrecFeatures.run, contarPalabras(args[0], " run "))
                .setAttribute(TrecFeatures.running, contarPalabras(args[0], " running "))
                .setAttribute(TrecFeatures.s, contarPalabras(args[0], " s "))
                .setAttribute(TrecFeatures.safe, contarPalabras(args[0], " safe "))
                .setAttribute(TrecFeatures.said, contarPalabras(args[0], " said "))
                .setAttribute(TrecFeatures.sales, contarPalabras(args[0], " sales "))
                .setAttribute(TrecFeatures.same, contarPalabras(args[0], " same "))
                .setAttribute(TrecFeatures.sat, contarPalabras(args[0], " sat "))
                .setAttribute(TrecFeatures.satisfaction, contarPalabras(args[0], " satisfaction "))
                .setAttribute(TrecFeatures.save, contarPalabras(args[0], " save "))
                .setAttribute(TrecFeatures.saved, contarPalabras(args[0], " saved "))
                .setAttribute(TrecFeatures.say, contarPalabras(args[0], " say "))
                .setAttribute(TrecFeatures.sayreville, contarPalabras(args[0], " sayreville "))
                .setAttribute(TrecFeatures.says, contarPalabras(args[0], " says "))
                .setAttribute(TrecFeatures.school, contarPalabras(args[0], " school "))
                .setAttribute(TrecFeatures.se, contarPalabras(args[0], " se "))
                .setAttribute(TrecFeatures.search, contarPalabras(args[0], " search "))
                .setAttribute(TrecFeatures.second, contarPalabras(args[0], " second "))
                .setAttribute(TrecFeatures.see, contarPalabras(args[0], " see "))
                .setAttribute(TrecFeatures.seem, contarPalabras(args[0], " seem "))
                .setAttribute(TrecFeatures.seemed, contarPalabras(args[0], " seemed "))
                .setAttribute(TrecFeatures.seen, contarPalabras(args[0], " seen "))
                .setAttribute(TrecFeatures.send, contarPalabras(args[0], " send "))
                .setAttribute(TrecFeatures.sense, contarPalabras(args[0], " sense "))
                .setAttribute(TrecFeatures.sent, contarPalabras(args[0], " sent "))
                .setAttribute(TrecFeatures.sentence, contarPalabras(args[0], " sentence "))
                .setAttribute(TrecFeatures.series, contarPalabras(args[0], " series "))
                .setAttribute(TrecFeatures.service, contarPalabras(args[0], " service "))
                .setAttribute(TrecFeatures.services, contarPalabras(args[0], " services "))
                .setAttribute(TrecFeatures.set, contarPalabras(args[0], " set "))
                .setAttribute(TrecFeatures.several, contarPalabras(args[0], " several "))
                .setAttribute(TrecFeatures.sex, contarPalabras(args[0], " sex "))
                .setAttribute(TrecFeatures.sexual, contarPalabras(args[0], " sexual "))
                .setAttribute(TrecFeatures.shall, contarPalabras(args[0], " shall "))
                .setAttribute(TrecFeatures.shamanism, contarPalabras(args[0], " shamanism "))
                .setAttribute(TrecFeatures.share, contarPalabras(args[0], " share "))
                .setAttribute(TrecFeatures.she, contarPalabras(args[0], " she "))
                .setAttribute(TrecFeatures.shed, contarPalabras(args[0], " shed "))
                .setAttribute(TrecFeatures.sheep, contarPalabras(args[0], " sheep "))
                .setAttribute(TrecFeatures.shipping, contarPalabras(args[0], " shipping "))
                .setAttribute(TrecFeatures.shoes, contarPalabras(args[0], " shoes "))
                .setAttribute(TrecFeatures.shook, contarPalabras(args[0], " shook "))
                .setAttribute(TrecFeatures.shop, contarPalabras(args[0], " shop "))
                .setAttribute(TrecFeatures.should, contarPalabras(args[0], " should "))
                .setAttribute(TrecFeatures.show, contarPalabras(args[0], " show "))
                .setAttribute(TrecFeatures.showed, contarPalabras(args[0], " showed "))
                .setAttribute(TrecFeatures.side, contarPalabras(args[0], " side "))
                .setAttribute(TrecFeatures.sign, contarPalabras(args[0], " sign "))
                .setAttribute(TrecFeatures.sin, contarPalabras(args[0], " sin "))
                .setAttribute(TrecFeatures.since, contarPalabras(args[0], " since "))
                .setAttribute(TrecFeatures.sir, contarPalabras(args[0], " sir "))
                .setAttribute(TrecFeatures.site, contarPalabras(args[0], " site "))
                .setAttribute(TrecFeatures.small, contarPalabras(args[0], " small "))
                .setAttribute(TrecFeatures.so, contarPalabras(args[0], " so "))
                .setAttribute(TrecFeatures.social, contarPalabras(args[0], " social "))
                .setAttribute(TrecFeatures.society, contarPalabras(args[0], " society "))
                .setAttribute(TrecFeatures.soft, contarPalabras(args[0], " soft "))
                .setAttribute(TrecFeatures.software, contarPalabras(args[0], " software "))
                .setAttribute(TrecFeatures.solid, contarPalabras(args[0], " solid "))
                .setAttribute(TrecFeatures.soma, contarPalabras(args[0], " soma "))
                .setAttribute(TrecFeatures.some, contarPalabras(args[0], " some "))
                .setAttribute(TrecFeatures.something, contarPalabras(args[0], " something "))
                .setAttribute(TrecFeatures.soon, contarPalabras(args[0], " soon "))
                .setAttribute(TrecFeatures.sounds, contarPalabras(args[0], " sounds "))
                .setAttribute(TrecFeatures.source, contarPalabras(args[0], " source "))
                .setAttribute(TrecFeatures.south, contarPalabras(args[0], " south "))
                .setAttribute(TrecFeatures.space, contarPalabras(args[0], " space "))
                .setAttribute(TrecFeatures.span, contarPalabras(args[0], " span "))
                .setAttribute(TrecFeatures.special, contarPalabras(args[0], " special "))
                .setAttribute(TrecFeatures.species, contarPalabras(args[0], " species "))
                .setAttribute(TrecFeatures.spirit, contarPalabras(args[0], " spirit "))
                .setAttribute(TrecFeatures.spirits, contarPalabras(args[0], " spirits "))
                .setAttribute(TrecFeatures.spiritual, contarPalabras(args[0], " spiritual "))
                .setAttribute(TrecFeatures.spring, contarPalabras(args[0], " spring "))
                .setAttribute(TrecFeatures.st, contarPalabras(args[0], " st "))
                .setAttribute(TrecFeatures.start, contarPalabras(args[0], " start "))
                .setAttribute(TrecFeatures.started, contarPalabras(args[0], " started "))
                .setAttribute(TrecFeatures.state, contarPalabras(args[0], " state "))
                .setAttribute(TrecFeatures.states, contarPalabras(args[0], " states "))
                .setAttribute(TrecFeatures.stay, contarPalabras(args[0], " stay "))
                .setAttribute(TrecFeatures.steadily, contarPalabras(args[0], " steadily "))
                .setAttribute(TrecFeatures.step, contarPalabras(args[0], " step "))
                .setAttribute(TrecFeatures.still, contarPalabras(args[0], " still "))
                .setAttribute(TrecFeatures.stimulation, contarPalabras(args[0], " stimulation "))
                .setAttribute(TrecFeatures.stood, contarPalabras(args[0], " stood "))
                .setAttribute(TrecFeatures.stop, contarPalabras(args[0], " stop "))
                .setAttribute(TrecFeatures.store, contarPalabras(args[0], " store "))
                .setAttribute(TrecFeatures.strange, contarPalabras(args[0], " strange "))
                .setAttribute(TrecFeatures.street, contarPalabras(args[0], " street "))
                .setAttribute(TrecFeatures.strong, contarPalabras(args[0], " strong "))
                .setAttribute(TrecFeatures.studio, contarPalabras(args[0], " studio "))
                .setAttribute(TrecFeatures.style, contarPalabras(args[0], " style "))
                .setAttribute(TrecFeatures.subject, contarPalabras(args[0], " subject "))
                .setAttribute(TrecFeatures.submit, contarPalabras(args[0], " submit "))
                .setAttribute(TrecFeatures.such, contarPalabras(args[0], " such "))
                .setAttribute(TrecFeatures.suite, contarPalabras(args[0], " suite "))
                .setAttribute(TrecFeatures.summer, contarPalabras(args[0], " summer "))
                .setAttribute(TrecFeatures.sums, contarPalabras(args[0], " sums "))
                .setAttribute(TrecFeatures.support, contarPalabras(args[0], " support "))
                .setAttribute(TrecFeatures.sure, contarPalabras(args[0], " sure "))
                .setAttribute(TrecFeatures.sym, contarPalabras(args[0], " sym "))
                .setAttribute(TrecFeatures.system, contarPalabras(args[0], " system "))
                .setAttribute(TrecFeatures.table, contarPalabras(args[0], " table "))
                .setAttribute(TrecFeatures.tablet, contarPalabras(args[0], " tablet "))
                .setAttribute(TrecFeatures.tabs, contarPalabras(args[0], " tabs "))
                .setAttribute(TrecFeatures.take, contarPalabras(args[0], " take "))
                .setAttribute(TrecFeatures.taking, contarPalabras(args[0], " taking "))
                .setAttribute(TrecFeatures.talk, contarPalabras(args[0], " talk "))
                .setAttribute(TrecFeatures.target, contarPalabras(args[0], " target "))
                .setAttribute(TrecFeatures.tax, contarPalabras(args[0], " tax "))
                .setAttribute(TrecFeatures.taxes, contarPalabras(args[0], " taxes "))
                .setAttribute(TrecFeatures.techniques, contarPalabras(args[0], " techniques "))
                .setAttribute(TrecFeatures.technology, contarPalabras(args[0], " technology "))
                .setAttribute(TrecFeatures.television, contarPalabras(args[0], " television "))
                .setAttribute(TrecFeatures.tell, contarPalabras(args[0], " tell "))
                .setAttribute(TrecFeatures.terminology, contarPalabras(args[0], " terminology "))
                .setAttribute(TrecFeatures.th, contarPalabras(args[0], " th "))
                .setAttribute(TrecFeatures.than, contarPalabras(args[0], " than "))
                .setAttribute(TrecFeatures.thank, contarPalabras(args[0], " thank "))
                .setAttribute(TrecFeatures.thanks, contarPalabras(args[0], " thanks "))
                .setAttribute(TrecFeatures.that, contarPalabras(args[0], " that "))
                .setAttribute(TrecFeatures.the, contarPalabras(args[0], " the "))
                .setAttribute(TrecFeatures.their, contarPalabras(args[0], " their "))
                .setAttribute(TrecFeatures.them, contarPalabras(args[0], " them "))
                .setAttribute(TrecFeatures.then, contarPalabras(args[0], " then "))
                .setAttribute(TrecFeatures.theories, contarPalabras(args[0], " theories "))
                .setAttribute(TrecFeatures.there, contarPalabras(args[0], " there "))
                .setAttribute(TrecFeatures.these, contarPalabras(args[0], " these "))
                .setAttribute(TrecFeatures.they, contarPalabras(args[0], " they "))
                .setAttribute(TrecFeatures.thing, contarPalabras(args[0], " thing "))
                .setAttribute(TrecFeatures.things, contarPalabras(args[0], " things "))
                .setAttribute(TrecFeatures.think, contarPalabras(args[0], " think "))
                .setAttribute(TrecFeatures.thinking, contarPalabras(args[0], " thinking "))
                .setAttribute(TrecFeatures.those, contarPalabras(args[0], " those "))
                .setAttribute(TrecFeatures.though, contarPalabras(args[0], " though "))
                .setAttribute(TrecFeatures.thought, contarPalabras(args[0], " thought "))
                .setAttribute(TrecFeatures.thousands, contarPalabras(args[0], " thousands "))
                .setAttribute(TrecFeatures.threats, contarPalabras(args[0], " threats "))
                .setAttribute(TrecFeatures.three, contarPalabras(args[0], " three "))
                .setAttribute(TrecFeatures.through, contarPalabras(args[0], " through "))
                .setAttribute(TrecFeatures.till, contarPalabras(args[0], " till "))
                .setAttribute(TrecFeatures.time, contarPalabras(args[0], " time "))
                .setAttribute(TrecFeatures.times, contarPalabras(args[0], " times "))
                .setAttribute(TrecFeatures.to, contarPalabras(args[0], " to "))
                .setAttribute(TrecFeatures.today, contarPalabras(args[0], " today "))
                .setAttribute(TrecFeatures.together, contarPalabras(args[0], " together "))
                .setAttribute(TrecFeatures.told, contarPalabras(args[0], " told "))
                .setAttribute(TrecFeatures.too, contarPalabras(args[0], " too "))
                .setAttribute(TrecFeatures.took, contarPalabras(args[0], " took "))
                .setAttribute(TrecFeatures.town, contarPalabras(args[0], " town "))
                .setAttribute(TrecFeatures.trade, contarPalabras(args[0], " trade "))
                .setAttribute(TrecFeatures.tramadol, contarPalabras(args[0], " tramadol "))
                .setAttribute(TrecFeatures.treat, contarPalabras(args[0], " treat "))
                .setAttribute(TrecFeatures.treatment, contarPalabras(args[0], " treatment "))
                .setAttribute(TrecFeatures.trebuchet, contarPalabras(args[0], " trebuchet "))
                .setAttribute(TrecFeatures.tried, contarPalabras(args[0], " tried "))
                .setAttribute(TrecFeatures.troubling, contarPalabras(args[0], " troubling "))
                .setAttribute(TrecFeatures.trying, contarPalabras(args[0], " trying "))
                .setAttribute(TrecFeatures.turn, contarPalabras(args[0], " turn "))
                .setAttribute(TrecFeatures.turned, contarPalabras(args[0], " turned "))
                .setAttribute(TrecFeatures.turning, contarPalabras(args[0], " turning "))
                .setAttribute(TrecFeatures.tutorials, contarPalabras(args[0], " tutorials "))
                .setAttribute(TrecFeatures.tv, contarPalabras(args[0], " tv "))
                .setAttribute(TrecFeatures.two, contarPalabras(args[0], " two "))
                .setAttribute(TrecFeatures.txp, contarPalabras(args[0], " txp "))
                .setAttribute(TrecFeatures.u, contarPalabras(args[0], " u "))
                .setAttribute(TrecFeatures.ultimate, contarPalabras(args[0], " ultimate "))
                .setAttribute(TrecFeatures.un, contarPalabras(args[0], " un "))
                .setAttribute(TrecFeatures.under, contarPalabras(args[0], " under "))
                .setAttribute(TrecFeatures.united, contarPalabras(args[0], " united "))
                .setAttribute(TrecFeatures.until, contarPalabras(args[0], " until "))
                .setAttribute(TrecFeatures.up, contarPalabras(args[0], " up "))
                .setAttribute(TrecFeatures.upon, contarPalabras(args[0], " upon "))
                .setAttribute(TrecFeatures.upto, contarPalabras(args[0], " upto "))
                .setAttribute(TrecFeatures.us, contarPalabras(args[0], " us "))
                .setAttribute(TrecFeatures.usdrugs, contarPalabras(args[0], " usdrugs "))
                .setAttribute(TrecFeatures.use, contarPalabras(args[0], " use "))
                .setAttribute(TrecFeatures.used, contarPalabras(args[0], " used "))
                .setAttribute(TrecFeatures.using, contarPalabras(args[0], " using "))
                .setAttribute(TrecFeatures.v, contarPalabras(args[0], " v "))
                .setAttribute(TrecFeatures.valued, contarPalabras(args[0], " valued "))
                .setAttribute(TrecFeatures.ve, contarPalabras(args[0], " ve "))
                .setAttribute(TrecFeatures.vegas, contarPalabras(args[0], " vegas "))
                .setAttribute(TrecFeatures.verdana, contarPalabras(args[0], " verdana "))
                .setAttribute(TrecFeatures.very, contarPalabras(args[0], " very "))
                .setAttribute(TrecFeatures.viagra, contarPalabras(args[0], " viagra "))
                .setAttribute(TrecFeatures.videos, contarPalabras(args[0], " videos "))
                .setAttribute(TrecFeatures.views, contarPalabras(args[0], " views "))
                .setAttribute(TrecFeatures.village, contarPalabras(args[0], " village "))
                .setAttribute(TrecFeatures.vip, contarPalabras(args[0], " vip "))
                .setAttribute(TrecFeatures.virtual, contarPalabras(args[0], " virtual "))
                .setAttribute(TrecFeatures.visit, contarPalabras(args[0], " visit "))
                .setAttribute(TrecFeatures.vista, contarPalabras(args[0], " vista "))
                .setAttribute(TrecFeatures.voice, contarPalabras(args[0], " voice "))
                .setAttribute(TrecFeatures.wait, contarPalabras(args[0], " wait "))
                .setAttribute(TrecFeatures.walking, contarPalabras(args[0], " walking "))
                .setAttribute(TrecFeatures.want, contarPalabras(args[0], " want "))
                .setAttribute(TrecFeatures.war, contarPalabras(args[0], " war "))
                .setAttribute(TrecFeatures.was, contarPalabras(args[0], " was "))
                .setAttribute(TrecFeatures.waste, contarPalabras(args[0], " waste "))
                .setAttribute(TrecFeatures.watch, contarPalabras(args[0], " watch "))
                .setAttribute(TrecFeatures.watches, contarPalabras(args[0], " watches "))
                .setAttribute(TrecFeatures.way, contarPalabras(args[0], " way "))
                .setAttribute(TrecFeatures.we, contarPalabras(args[0], " we "))
                .setAttribute(TrecFeatures.web, contarPalabras(args[0], " web "))
                .setAttribute(TrecFeatures.website, contarPalabras(args[0], " website "))
                .setAttribute(TrecFeatures.week, contarPalabras(args[0], " week "))
                .setAttribute(TrecFeatures.well, contarPalabras(args[0], " well "))
                .setAttribute(TrecFeatures.wendy, contarPalabras(args[0], " wendy "))
                .setAttribute(TrecFeatures.went, contarPalabras(args[0], " went "))
                .setAttribute(TrecFeatures.were, contarPalabras(args[0], " were "))
                .setAttribute(TrecFeatures.what, contarPalabras(args[0], " what "))
                .setAttribute(TrecFeatures.when, contarPalabras(args[0], " when "))
                .setAttribute(TrecFeatures.where, contarPalabras(args[0], " where "))
                .setAttribute(TrecFeatures.whether, contarPalabras(args[0], " whether "))
                .setAttribute(TrecFeatures.which, contarPalabras(args[0], " which "))
                .setAttribute(TrecFeatures.white, contarPalabras(args[0], " white "))
                .setAttribute(TrecFeatures.who, contarPalabras(args[0], " who "))
                .setAttribute(TrecFeatures.whole, contarPalabras(args[0], " whole "))
                .setAttribute(TrecFeatures.whom, contarPalabras(args[0], " whom "))
                .setAttribute(TrecFeatures.whose, contarPalabras(args[0], " whose "))
                .setAttribute(TrecFeatures.why, contarPalabras(args[0], " why "))
                .setAttribute(TrecFeatures.wiccan, contarPalabras(args[0], " wiccan "))
                .setAttribute(TrecFeatures.wider, contarPalabras(args[0], " wider "))
                .setAttribute(TrecFeatures.wife, contarPalabras(args[0], " wife "))
                .setAttribute(TrecFeatures.will, contarPalabras(args[0], " will "))
                .setAttribute(TrecFeatures.windows, contarPalabras(args[0], " windows "))
                .setAttribute(TrecFeatures.windowtext, contarPalabras(args[0], " windowtext "))
                .setAttribute(TrecFeatures.wish, contarPalabras(args[0], " wish "))
                .setAttribute(TrecFeatures.with, contarPalabras(args[0], " with "))
                .setAttribute(TrecFeatures.within, contarPalabras(args[0], " within "))
                .setAttribute(TrecFeatures.without, contarPalabras(args[0], " without "))
                .setAttribute(TrecFeatures.woman, contarPalabras(args[0], " woman "))
                .setAttribute(TrecFeatures.won, contarPalabras(args[0], " won "))
                .setAttribute(TrecFeatures.wonder, contarPalabras(args[0], " wonder "))
                .setAttribute(TrecFeatures.word, contarPalabras(args[0], " word "))
                .setAttribute(TrecFeatures.words, contarPalabras(args[0], " words "))
                .setAttribute(TrecFeatures.work, contarPalabras(args[0], " work "))
                .setAttribute(TrecFeatures.workers, contarPalabras(args[0], " workers "))
                .setAttribute(TrecFeatures.works, contarPalabras(args[0], " works "))
                .setAttribute(TrecFeatures.world, contarPalabras(args[0], " world "))
                .setAttribute(TrecFeatures.worldview, contarPalabras(args[0], " worldview "))
                .setAttribute(TrecFeatures.worldwide, contarPalabras(args[0], " worldwide "))
                .setAttribute(TrecFeatures.worse, contarPalabras(args[0], " worse "))
                .setAttribute(TrecFeatures.worst, contarPalabras(args[0], " worst "))
                .setAttribute(TrecFeatures.would, contarPalabras(args[0], " would "))
                .setAttribute(TrecFeatures.write, contarPalabras(args[0], " write "))
                .setAttribute(TrecFeatures.www, contarPalabras(args[0], " www "))
                .setAttribute(TrecFeatures.y, contarPalabras(args[0], " y "))
                .setAttribute(TrecFeatures.year, contarPalabras(args[0], " year "))
                .setAttribute(TrecFeatures.years, contarPalabras(args[0], " years "))
                .setAttribute(TrecFeatures.yes, contarPalabras(args[0], " yes "))
                .setAttribute(TrecFeatures.yesterday, contarPalabras(args[0], " yesterday "))
                .setAttribute(TrecFeatures.yet, contarPalabras(args[0], " yet "))
                .setAttribute(TrecFeatures.you, contarPalabras(args[0], " you "))
                .setAttribute(TrecFeatures.young, contarPalabras(args[0], " young "))
                .setAttribute(TrecFeatures.younger, contarPalabras(args[0], " younger "))
                .setAttribute(TrecFeatures.your, contarPalabras(args[0], " your "))
                .setAttribute(TrecFeatures.yours, contarPalabras(args[0], " yours "))
                .setAttribute(TrecFeatures.yourself, contarPalabras(args[0], " yourself "))
                .setAttribute(TrecFeatures.abbott, contarPalabras(args[0], " abbott "))
                .setAttribute(TrecFeatures.according, contarPalabras(args[0], " according "))
                .setAttribute(TrecFeatures.accuweather, contarPalabras(args[0], " accuweather "))
                .setAttribute(TrecFeatures.actual, contarPalabras(args[0], " actual "))
                .setAttribute(TrecFeatures.added, contarPalabras(args[0], " added "))
                .setAttribute(TrecFeatures.additional, contarPalabras(args[0], " additional "))
                .setAttribute(TrecFeatures.administration, contarPalabras(args[0], " administration "))
                .setAttribute(TrecFeatures.against, contarPalabras(args[0], " against "))
                .setAttribute(TrecFeatures.agreed, contarPalabras(args[0], " agreed "))
                .setAttribute(TrecFeatures.agreement, contarPalabras(args[0], " agreement "))
                .setAttribute(TrecFeatures.alerts, contarPalabras(args[0], " alerts "))
                .setAttribute(TrecFeatures.allocated, contarPalabras(args[0], " allocated "))
                .setAttribute(TrecFeatures.alter, contarPalabras(args[0], " alter "))
                .setAttribute(TrecFeatures.america, contarPalabras(args[0], " america "))
                .setAttribute(TrecFeatures.analysis, contarPalabras(args[0], " analysis "))
                .setAttribute(TrecFeatures.annex, contarPalabras(args[0], " annex "))
                .setAttribute(TrecFeatures.ap, contarPalabras(args[0], " ap "))
                .setAttribute(TrecFeatures.apr, contarPalabras(args[0], " apr "))
                .setAttribute(TrecFeatures.archaeologists, contarPalabras(args[0], " archaeologists "))
                .setAttribute(TrecFeatures.areas, contarPalabras(args[0], " areas "))
                .setAttribute(TrecFeatures.arm, contarPalabras(args[0], " arm "))
                .setAttribute(TrecFeatures.array, contarPalabras(args[0], " array "))
                .setAttribute(TrecFeatures.artifacts, contarPalabras(args[0], " artifacts "))
                .setAttribute(TrecFeatures.atlanta, contarPalabras(args[0], " atlanta "))
                .setAttribute(TrecFeatures.attempt, contarPalabras(args[0], " attempt "))
                .setAttribute(TrecFeatures.auto, contarPalabras(args[0], " auto "))
                .setAttribute(TrecFeatures.baghdad, contarPalabras(args[0], " baghdad "))
                .setAttribute(TrecFeatures.base, contarPalabras(args[0], " base "))
                .setAttribute(TrecFeatures.beach, contarPalabras(args[0], " beach "))
                .setAttribute(TrecFeatures.begin, contarPalabras(args[0], " begin "))
                .setAttribute(TrecFeatures.bhatia, contarPalabras(args[0], " bhatia "))
                .setAttribute(TrecFeatures.blood, contarPalabras(args[0], " blood "))
                .setAttribute(TrecFeatures.bob, contarPalabras(args[0], " bob "))
                .setAttribute(TrecFeatures.bold, contarPalabras(args[0], " bold "))
                .setAttribute(TrecFeatures.breaking, contarPalabras(args[0], " breaking "))
                .setAttribute(TrecFeatures.bruto, contarPalabras(args[0], " bruto "))
                .setAttribute(TrecFeatures.buffer, contarPalabras(args[0], " buffer "))
                .setAttribute(TrecFeatures.bug, contarPalabras(args[0], " bug "))
                .setAttribute(TrecFeatures.build, contarPalabras(args[0], " build "))
                .setAttribute(TrecFeatures.built, contarPalabras(args[0], " built "))
                .setAttribute(TrecFeatures.bush, contarPalabras(args[0], " bush "))
                .setAttribute(TrecFeatures.buttons, contarPalabras(args[0], " buttons "))
                .setAttribute(TrecFeatures.cable, contarPalabras(args[0], " cable "))
                .setAttribute(TrecFeatures.cacheprime, contarPalabras(args[0], " cacheprime "))
                .setAttribute(TrecFeatures.calls, contarPalabras(args[0], " calls "))
                .setAttribute(TrecFeatures.campaign, contarPalabras(args[0], " campaign "))
                .setAttribute(TrecFeatures.car, contarPalabras(args[0], " car "))
                .setAttribute(TrecFeatures.cars, contarPalabras(args[0], " cars "))
                .setAttribute(TrecFeatures.cases, contarPalabras(args[0], " cases "))
                .setAttribute(TrecFeatures.category, contarPalabras(args[0], " category "))
                .setAttribute(TrecFeatures.cbs, contarPalabras(args[0], " cbs "))
                .setAttribute(TrecFeatures.cbsnews, contarPalabras(args[0], " cbsnews "))
                .setAttribute(TrecFeatures.certain, contarPalabras(args[0], " certain "))
                .setAttribute(TrecFeatures.cf, contarPalabras(args[0], " cf "))
                .setAttribute(TrecFeatures.cgi, contarPalabras(args[0], " cgi "))
                .setAttribute(TrecFeatures.chairman, contarPalabras(args[0], " chairman "))
                .setAttribute(TrecFeatures.challenge, contarPalabras(args[0], " challenge "))
                .setAttribute(TrecFeatures.changed, contarPalabras(args[0], " changed "))
                .setAttribute(TrecFeatures.changes, contarPalabras(args[0], " changes "))
                .setAttribute(TrecFeatures.changeset, contarPalabras(args[0], " changeset "))
                .setAttribute(TrecFeatures.checking, contarPalabras(args[0], " checking "))
                .setAttribute(TrecFeatures.cheers, contarPalabras(args[0], " cheers "))
                .setAttribute(TrecFeatures.clear, contarPalabras(args[0], " clear "))
                .setAttribute(TrecFeatures.client, contarPalabras(args[0], " client "))
                .setAttribute(TrecFeatures.clients, contarPalabras(args[0], " clients "))
                .setAttribute(TrecFeatures.close, contarPalabras(args[0], " close "))
                .setAttribute(TrecFeatures.clouds, contarPalabras(args[0], " clouds "))
                .setAttribute(TrecFeatures.cloudy, contarPalabras(args[0], " cloudy "))
                .setAttribute(TrecFeatures.cnn, contarPalabras(args[0], " cnn "))
                .setAttribute(TrecFeatures.cochrane, contarPalabras(args[0], " cochrane "))
                .setAttribute(TrecFeatures.code, contarPalabras(args[0], " code "))
                .setAttribute(TrecFeatures.commands, contarPalabras(args[0], " commands "))
                .setAttribute(TrecFeatures.commented, contarPalabras(args[0], " commented "))
                .setAttribute(TrecFeatures.commercial, contarPalabras(args[0], " commercial "))
                .setAttribute(TrecFeatures.committee, contarPalabras(args[0], " committee "))
                .setAttribute(TrecFeatures.community, contarPalabras(args[0], " community "))
                .setAttribute(TrecFeatures.compile, contarPalabras(args[0], " compile "))
                .setAttribute(TrecFeatures.conf, contarPalabras(args[0], " conf "))
                .setAttribute(TrecFeatures.conference, contarPalabras(args[0], " conference "))
                .setAttribute(TrecFeatures.configuration, contarPalabras(args[0], " configuration "))
                .setAttribute(TrecFeatures.configure, contarPalabras(args[0], " configure "))
                .setAttribute(TrecFeatures.congress, contarPalabras(args[0], " congress "))
                .setAttribute(TrecFeatures.connection, contarPalabras(args[0], " connection "))
                .setAttribute(TrecFeatures.control, contarPalabras(args[0], " control "))
                .setAttribute(TrecFeatures.cool, contarPalabras(args[0], " cool "))
                .setAttribute(TrecFeatures.copy, contarPalabras(args[0], " copy "))
                .setAttribute(TrecFeatures.copyright, contarPalabras(args[0], " copyright "))
                .setAttribute(TrecFeatures.core, contarPalabras(args[0], " core "))
                .setAttribute(TrecFeatures.corp, contarPalabras(args[0], " corp "))
                .setAttribute(TrecFeatures.correct, contarPalabras(args[0], " correct "))
                .setAttribute(TrecFeatures.correspondence, contarPalabras(args[0], " correspondence "))
                .setAttribute(TrecFeatures.countries, contarPalabras(args[0], " countries "))
                .setAttribute(TrecFeatures.couple, contarPalabras(args[0], " couple "))
                .setAttribute(TrecFeatures.court, contarPalabras(args[0], " court "))
                .setAttribute(TrecFeatures.create, contarPalabras(args[0], " create "))
                .setAttribute(TrecFeatures.created, contarPalabras(args[0], " created "))
                .setAttribute(TrecFeatures.criteria, contarPalabras(args[0], " criteria "))
                .setAttribute(TrecFeatures.cultural, contarPalabras(args[0], " cultural "))
                .setAttribute(TrecFeatures.currently, contarPalabras(args[0], " currently "))
                .setAttribute(TrecFeatures.cut, contarPalabras(args[0], " cut "))
                .setAttribute(TrecFeatures.daily, contarPalabras(args[0], " daily "))
                .setAttribute(TrecFeatures.datasets, contarPalabras(args[0], " datasets "))
                .setAttribute(TrecFeatures.date, contarPalabras(args[0], " date "))
                .setAttribute(TrecFeatures.db, contarPalabras(args[0], " db "))
                .setAttribute(TrecFeatures.deadline, contarPalabras(args[0], " deadline "))
                .setAttribute(TrecFeatures.dealers, contarPalabras(args[0], " dealers "))
                .setAttribute(TrecFeatures.debian, contarPalabras(args[0], " debian "))
                .setAttribute(TrecFeatures.decision, contarPalabras(args[0], " decision "))
                .setAttribute(TrecFeatures.decreased, contarPalabras(args[0], " decreased "))
                .setAttribute(TrecFeatures.demand, contarPalabras(args[0], " demand "))
                .setAttribute(TrecFeatures.democratic, contarPalabras(args[0], " democratic "))
                .setAttribute(TrecFeatures.democrats, contarPalabras(args[0], " democrats "))
                .setAttribute(TrecFeatures.department, contarPalabras(args[0], " department "))
                .setAttribute(TrecFeatures.dept, contarPalabras(args[0], " dept "))
                .setAttribute(TrecFeatures.des, contarPalabras(args[0], " des "))
                .setAttribute(TrecFeatures.developing, contarPalabras(args[0], " developing "))
                .setAttribute(TrecFeatures.development, contarPalabras(args[0], " development "))
                .setAttribute(TrecFeatures.devices, contarPalabras(args[0], " devices "))
                .setAttribute(TrecFeatures.di, contarPalabras(args[0], " di "))
                .setAttribute(TrecFeatures.didmsg, contarPalabras(args[0], " didmsg "))
                .setAttribute(TrecFeatures.didn, contarPalabras(args[0], " didn "))
                .setAttribute(TrecFeatures.differential, contarPalabras(args[0], " differential "))
                .setAttribute(TrecFeatures.directory, contarPalabras(args[0], " directory "))
                .setAttribute(TrecFeatures.discuss, contarPalabras(args[0], " discuss "))
                .setAttribute(TrecFeatures.document, contarPalabras(args[0], " document "))
                .setAttribute(TrecFeatures.doesn, contarPalabras(args[0], " doesn "))
                .setAttribute(TrecFeatures.du, contarPalabras(args[0], " du "))
                .setAttribute(TrecFeatures.earlier, contarPalabras(args[0], " earlier "))
                .setAttribute(TrecFeatures.easier, contarPalabras(args[0], " easier "))
                .setAttribute(TrecFeatures.easter, contarPalabras(args[0], " easter "))
                .setAttribute(TrecFeatures.easy, contarPalabras(args[0], " easy "))
                .setAttribute(TrecFeatures.echo, contarPalabras(args[0], " echo "))
                .setAttribute(TrecFeatures.education, contarPalabras(args[0], " education "))
                .setAttribute(TrecFeatures.emailed, contarPalabras(args[0], " emailed "))
                .setAttribute(TrecFeatures.ensure, contarPalabras(args[0], " ensure "))
                .setAttribute(TrecFeatures.enter, contarPalabras(args[0], " enter "))
                .setAttribute(TrecFeatures.entertainment, contarPalabras(args[0], " entertainment "))
                .setAttribute(TrecFeatures.entry, contarPalabras(args[0], " entry "))
                .setAttribute(TrecFeatures.environment, contarPalabras(args[0], " environment "))
                .setAttribute(TrecFeatures.err, contarPalabras(args[0], " err "))
                .setAttribute(TrecFeatures.errors, contarPalabras(args[0], " errors "))
                .setAttribute(TrecFeatures.et, contarPalabras(args[0], " et "))
                .setAttribute(TrecFeatures.etc, contarPalabras(args[0], " etc "))
                .setAttribute(TrecFeatures.etch, contarPalabras(args[0], " etch "))
                .setAttribute(TrecFeatures.evening, contarPalabras(args[0], " evening "))
                .setAttribute(TrecFeatures.event, contarPalabras(args[0], " event "))
                .setAttribute(TrecFeatures.evidence, contarPalabras(args[0], " evidence "))
                .setAttribute(TrecFeatures.exactly, contarPalabras(args[0], " exactly "))
                .setAttribute(TrecFeatures.example, contarPalabras(args[0], " example "))
                .setAttribute(TrecFeatures.experts, contarPalabras(args[0], " experts "))
                .setAttribute(TrecFeatures.f, contarPalabras(args[0], " f "))
                .setAttribute(TrecFeatures.factor, contarPalabras(args[0], " factor "))
                .setAttribute(TrecFeatures.fd, contarPalabras(args[0], " fd "))
                .setAttribute(TrecFeatures.fda, contarPalabras(args[0], " fda "))
                .setAttribute(TrecFeatures.federal, contarPalabras(args[0], " federal "))
                .setAttribute(TrecFeatures.file, contarPalabras(args[0], " file "))
                .setAttribute(TrecFeatures.files, contarPalabras(args[0], " files "))
                .setAttribute(TrecFeatures.fix, contarPalabras(args[0], " fix "))
                .setAttribute(TrecFeatures.fixed, contarPalabras(args[0], " fixed "))
                .setAttribute(TrecFeatures.fixes, contarPalabras(args[0], " fixes "))
                .setAttribute(TrecFeatures.flag, contarPalabras(args[0], " flag "))
                .setAttribute(TrecFeatures.flags, contarPalabras(args[0], " flags "))
                .setAttribute(TrecFeatures.fog, contarPalabras(args[0], " fog "))
                .setAttribute(TrecFeatures.force, contarPalabras(args[0], " force "))
                .setAttribute(TrecFeatures.forecast, contarPalabras(args[0], " forecast "))
                .setAttribute(TrecFeatures.foreign, contarPalabras(args[0], " foreign "))
                .setAttribute(TrecFeatures.former, contarPalabras(args[0], " former "))
                .setAttribute(TrecFeatures.fox, contarPalabras(args[0], " fox "))
                .setAttribute(TrecFeatures.frame, contarPalabras(args[0], " frame "))
                .setAttribute(TrecFeatures.fromfd, contarPalabras(args[0], " fromfd "))
                .setAttribute(TrecFeatures.fta, contarPalabras(args[0], " fta "))
                .setAttribute(TrecFeatures.function, contarPalabras(args[0], " function "))
                .setAttribute(TrecFeatures.functions, contarPalabras(args[0], " functions "))
                .setAttribute(TrecFeatures.gas, contarPalabras(args[0], " gas "))
                .setAttribute(TrecFeatures.general, contarPalabras(args[0], " general "))
                .setAttribute(TrecFeatures.george, contarPalabras(args[0], " george "))
                .setAttribute(TrecFeatures.georgia, contarPalabras(args[0], " georgia "))
                .setAttribute(TrecFeatures.gets, contarPalabras(args[0], " gets "))
                .setAttribute(TrecFeatures.gif, contarPalabras(args[0], " gif "))
                .setAttribute(TrecFeatures.given, contarPalabras(args[0], " given "))
                .setAttribute(TrecFeatures.global, contarPalabras(args[0], " global "))
                .setAttribute(TrecFeatures.gonzales, contarPalabras(args[0], " gonzales "))
                .setAttribute(TrecFeatures.google, contarPalabras(args[0], " google "))
                .setAttribute(TrecFeatures.greater, contarPalabras(args[0], " greater "))
                .setAttribute(TrecFeatures.green, contarPalabras(args[0], " green "))
                .setAttribute(TrecFeatures.greg, contarPalabras(args[0], " greg "))
                .setAttribute(TrecFeatures.guess, contarPalabras(args[0], " guess "))
                .setAttribute(TrecFeatures.guide, contarPalabras(args[0], " guide "))
                .setAttribute(TrecFeatures.h, contarPalabras(args[0], " h "))
                .setAttribute(TrecFeatures.handle, contarPalabras(args[0], " handle "))
                .setAttribute(TrecFeatures.having, contarPalabras(args[0], " having "))
                .setAttribute(TrecFeatures.hello, contarPalabras(args[0], " hello "))
                .setAttribute(TrecFeatures.hi, contarPalabras(args[0], " hi "))
                .setAttribute(TrecFeatures.hippo, contarPalabras(args[0], " hippo "))
                .setAttribute(TrecFeatures.hourly, contarPalabras(args[0], " hourly "))
                .setAttribute(TrecFeatures.hover, contarPalabras(args[0], " hover "))
                .setAttribute(TrecFeatures.howstuffworks, contarPalabras(args[0], " howstuffworks "))
                .setAttribute(TrecFeatures.htaccess, contarPalabras(args[0], " htaccess "))
                .setAttribute(TrecFeatures.immediately, contarPalabras(args[0], " immediately "))
                .setAttribute(TrecFeatures.immigration, contarPalabras(args[0], " immigration "))
                .setAttribute(TrecFeatures.implementation, contarPalabras(args[0], " implementation "))
                .setAttribute(TrecFeatures.important, contarPalabras(args[0], " important "))
                .setAttribute(TrecFeatures.imus, contarPalabras(args[0], " imus "))
                .setAttribute(TrecFeatures.inc, contarPalabras(args[0], " inc "))
                .setAttribute(TrecFeatures.include, contarPalabras(args[0], " include "))
                .setAttribute(TrecFeatures.includes, contarPalabras(args[0], " includes "))
                .setAttribute(TrecFeatures.independent, contarPalabras(args[0], " independent "))
                .setAttribute(TrecFeatures.index, contarPalabras(args[0], " index "))
                .setAttribute(TrecFeatures.india, contarPalabras(args[0], " india "))
                .setAttribute(TrecFeatures.initial, contarPalabras(args[0], " initial "))
                .setAttribute(TrecFeatures.innovative, contarPalabras(args[0], " innovative "))
                .setAttribute(TrecFeatures.inside, contarPalabras(args[0], " inside "))
                .setAttribute(TrecFeatures.install, contarPalabras(args[0], " install "))
                .setAttribute(TrecFeatures.installed, contarPalabras(args[0], " installed "))
                .setAttribute(TrecFeatures.institute, contarPalabras(args[0], " institute "))
                .setAttribute(TrecFeatures.integration, contarPalabras(args[0], " integration "))
                .setAttribute(TrecFeatures.intellectual, contarPalabras(args[0], " intellectual "))
                .setAttribute(TrecFeatures.intended, contarPalabras(args[0], " intended "))
                .setAttribute(TrecFeatures.interaction, contarPalabras(args[0], " interaction "))
                .setAttribute(TrecFeatures.interactive, contarPalabras(args[0], " interactive "))
                .setAttribute(TrecFeatures.internal, contarPalabras(args[0], " internal "))
                .setAttribute(TrecFeatures.international, contarPalabras(args[0], " international "))
                .setAttribute(TrecFeatures.interp, contarPalabras(args[0], " interp "))
                .setAttribute(TrecFeatures.intval, contarPalabras(args[0], " intval "))
                .setAttribute(TrecFeatures.investor, contarPalabras(args[0], " investor "))
                .setAttribute(TrecFeatures.iraq, contarPalabras(args[0], " iraq "))
                .setAttribute(TrecFeatures.issues, contarPalabras(args[0], " issues "))
                .setAttribute(TrecFeatures.iteration, contarPalabras(args[0], " iteration "))
                .setAttribute(TrecFeatures.james, contarPalabras(args[0], " james "))
                .setAttribute(TrecFeatures.jeremy, contarPalabras(args[0], " jeremy "))
                .setAttribute(TrecFeatures.jerry, contarPalabras(args[0], " jerry "))
                .setAttribute(TrecFeatures.john, contarPalabras(args[0], " john "))
                .setAttribute(TrecFeatures.johnson, contarPalabras(args[0], " johnson "))
                .setAttribute(TrecFeatures.kdawson, contarPalabras(args[0], " kdawson "))
                .setAttribute(TrecFeatures.kernel, contarPalabras(args[0], " kernel "))
                .setAttribute(TrecFeatures.key, contarPalabras(args[0], " key "))
                .setAttribute(TrecFeatures.king, contarPalabras(args[0], " king "))
                .setAttribute(TrecFeatures.korea, contarPalabras(args[0], " korea "))
                .setAttribute(TrecFeatures.korean, contarPalabras(args[0], " korean "))
                .setAttribute(TrecFeatures.labor, contarPalabras(args[0], " labor "))
                .setAttribute(TrecFeatures.lack, contarPalabras(args[0], " lack "))
                .setAttribute(TrecFeatures.language, contarPalabras(args[0], " language "))
                .setAttribute(TrecFeatures.lapply, contarPalabras(args[0], " lapply "))
                .setAttribute(TrecFeatures.laptop, contarPalabras(args[0], " laptop "))
                .setAttribute(TrecFeatures.law, contarPalabras(args[0], " law "))
                .setAttribute(TrecFeatures.le, contarPalabras(args[0], " le "))
                .setAttribute(TrecFeatures.least, contarPalabras(args[0], " least "))
                .setAttribute(TrecFeatures.len, contarPalabras(args[0], " len "))
                .setAttribute(TrecFeatures.length, contarPalabras(args[0], " length "))
                .setAttribute(TrecFeatures.les, contarPalabras(args[0], " les "))
                .setAttribute(TrecFeatures.levels, contarPalabras(args[0], " levels "))
                .setAttribute(TrecFeatures.levin, contarPalabras(args[0], " levin "))
                .setAttribute(TrecFeatures.lib, contarPalabras(args[0], " lib "))
                .setAttribute(TrecFeatures.library, contarPalabras(args[0], " library "))
                .setAttribute(TrecFeatures.likely, contarPalabras(args[0], " likely "))
                .setAttribute(TrecFeatures.links, contarPalabras(args[0], " links "))
                .setAttribute(TrecFeatures.linux, contarPalabras(args[0], " linux "))
                .setAttribute(TrecFeatures.listing, contarPalabras(args[0], " listing "))
                .setAttribute(TrecFeatures.log, contarPalabras(args[0], " log "))
                .setAttribute(TrecFeatures.looks, contarPalabras(args[0], " looks "))
                .setAttribute(TrecFeatures.lp, contarPalabras(args[0], " lp "))
                .setAttribute(TrecFeatures.machine, contarPalabras(args[0], " machine "))
                .setAttribute(TrecFeatures.machines, contarPalabras(args[0], " machines "))
                .setAttribute(TrecFeatures.mailing, contarPalabras(args[0], " mailing "))
                .setAttribute(TrecFeatures.mainly, contarPalabras(args[0], " mainly "))
                .setAttribute(TrecFeatures.makes, contarPalabras(args[0], " makes "))
                .setAttribute(TrecFeatures.making, contarPalabras(args[0], " making "))
                .setAttribute(TrecFeatures.manage, contarPalabras(args[0], " manage "))
                .setAttribute(TrecFeatures.management, contarPalabras(args[0], " management "))
                .setAttribute(TrecFeatures.maps, contarPalabras(args[0], " maps "))
                .setAttribute(TrecFeatures.margin, contarPalabras(args[0], " margin "))
                .setAttribute(TrecFeatures.marketing, contarPalabras(args[0], " marketing "))
                .setAttribute(TrecFeatures.math, contarPalabras(args[0], " math "))
                .setAttribute(TrecFeatures.max, contarPalabras(args[0], " max "))
                .setAttribute(TrecFeatures.maybe, contarPalabras(args[0], " maybe "))
                .setAttribute(TrecFeatures.mclaren, contarPalabras(args[0], " mclaren "))
                .setAttribute(TrecFeatures.medical, contarPalabras(args[0], " medical "))
                .setAttribute(TrecFeatures.medicines, contarPalabras(args[0], " medicines "))
                .setAttribute(TrecFeatures.meeting, contarPalabras(args[0], " meeting "))
                .setAttribute(TrecFeatures.members, contarPalabras(args[0], " members "))
                .setAttribute(TrecFeatures.method, contarPalabras(args[0], " method "))
                .setAttribute(TrecFeatures.methods, contarPalabras(args[0], " methods "))
                .setAttribute(TrecFeatures.michael, contarPalabras(args[0], " michael "))
                .setAttribute(TrecFeatures.mike, contarPalabras(args[0], " mike "))
                .setAttribute(TrecFeatures.minimal, contarPalabras(args[0], " minimal "))
                .setAttribute(TrecFeatures.mirror, contarPalabras(args[0], " mirror "))
                .setAttribute(TrecFeatures.model, contarPalabras(args[0], " model "))
                .setAttribute(TrecFeatures.modified, contarPalabras(args[0], " modified "))
                .setAttribute(TrecFeatures.modify, contarPalabras(args[0], " modify "))
                .setAttribute(TrecFeatures.module, contarPalabras(args[0], " module "))
                .setAttribute(TrecFeatures.modules, contarPalabras(args[0], " modules "))
                .setAttribute(TrecFeatures.mon, contarPalabras(args[0], " mon "))
                .setAttribute(TrecFeatures.monday, contarPalabras(args[0], " monday "))
                .setAttribute(TrecFeatures.month, contarPalabras(args[0], " month "))
                .setAttribute(TrecFeatures.morning, contarPalabras(args[0], " morning "))
                .setAttribute(TrecFeatures.mostly, contarPalabras(args[0], " mostly "))
                .setAttribute(TrecFeatures.multiple, contarPalabras(args[0], " multiple "))
                .setAttribute(TrecFeatures.museum, contarPalabras(args[0], " museum "))
                .setAttribute(TrecFeatures.mydata, contarPalabras(args[0], " mydata "))
                .setAttribute(TrecFeatures.mylast, contarPalabras(args[0], " mylast "))
                .setAttribute(TrecFeatures.nav, contarPalabras(args[0], " nav "))
                .setAttribute(TrecFeatures.nearly, contarPalabras(args[0], " nearly "))
                .setAttribute(TrecFeatures.newsletter, contarPalabras(args[0], " newsletter "))
                .setAttribute(TrecFeatures.noshade, contarPalabras(args[0], " noshade "))
                .setAttribute(TrecFeatures.notify, contarPalabras(args[0], " notify "))
                .setAttribute(TrecFeatures.nread, contarPalabras(args[0], " nread "))
                .setAttribute(TrecFeatures.nuclear, contarPalabras(args[0], " nuclear "))
                .setAttribute(TrecFeatures.num, contarPalabras(args[0], " num "))
                .setAttribute(TrecFeatures.ny, contarPalabras(args[0], " ny "))
                .setAttribute(TrecFeatures.object, contarPalabras(args[0], " object "))
                .setAttribute(TrecFeatures.objects, contarPalabras(args[0], " objects "))
                .setAttribute(TrecFeatures.offset, contarPalabras(args[0], " offset "))
                .setAttribute(TrecFeatures.op, contarPalabras(args[0], " op "))
                .setAttribute(TrecFeatures.open, contarPalabras(args[0], " open "))
                .setAttribute(TrecFeatures.opere, contarPalabras(args[0], " opere "))
                .setAttribute(TrecFeatures.option, contarPalabras(args[0], " option "))
                .setAttribute(TrecFeatures.options, contarPalabras(args[0], " options "))
                .setAttribute(TrecFeatures.org, contarPalabras(args[0], " org "))
                .setAttribute(TrecFeatures.output, contarPalabras(args[0], " output "))
                .setAttribute(TrecFeatures.ozone, contarPalabras(args[0], " ozone "))
                .setAttribute(TrecFeatures.packages, contarPalabras(args[0], " packages "))
                .setAttribute(TrecFeatures.panel, contarPalabras(args[0], " panel "))
                .setAttribute(TrecFeatures.par, contarPalabras(args[0], " par "))
                .setAttribute(TrecFeatures.parrot, contarPalabras(args[0], " parrot "))
                .setAttribute(TrecFeatures.particular, contarPalabras(args[0], " particular "))
                .setAttribute(TrecFeatures.pass, contarPalabras(args[0], " pass "))
                .setAttribute(TrecFeatures.patch, contarPalabras(args[0], " patch "))
                .setAttribute(TrecFeatures.patent, contarPalabras(args[0], " patent "))
                .setAttribute(TrecFeatures.path, contarPalabras(args[0], " path "))
                .setAttribute(TrecFeatures.paul, contarPalabras(args[0], " paul "))
                .setAttribute(TrecFeatures.peach, contarPalabras(args[0], " peach "))
                .setAttribute(TrecFeatures.percent, contarPalabras(args[0], " percent "))
                .setAttribute(TrecFeatures.performance, contarPalabras(args[0], " performance "))
                .setAttribute(TrecFeatures.period, contarPalabras(args[0], " period "))
                .setAttribute(TrecFeatures.perl, contarPalabras(args[0], " perl "))
                .setAttribute(TrecFeatures.personalized, contarPalabras(args[0], " personalized "))
                .setAttribute(TrecFeatures.pharmaceutical, contarPalabras(args[0], " pharmaceutical "))
                .setAttribute(TrecFeatures.pharmaceuticals, contarPalabras(args[0], " pharmaceuticals "))
                .setAttribute(TrecFeatures.planning, contarPalabras(args[0], " planning "))
                .setAttribute(TrecFeatures.platform, contarPalabras(args[0], " platform "))
                .setAttribute(TrecFeatures.plot, contarPalabras(args[0], " plot "))
                .setAttribute(TrecFeatures.policy, contarPalabras(args[0], " policy "))
                .setAttribute(TrecFeatures.political, contarPalabras(args[0], " political "))
                .setAttribute(TrecFeatures.pos, contarPalabras(args[0], " pos "))
                .setAttribute(TrecFeatures.possible, contarPalabras(args[0], " possible "))
                .setAttribute(TrecFeatures.post, contarPalabras(args[0], " post "))
                .setAttribute(TrecFeatures.posting, contarPalabras(args[0], " posting "))
                .setAttribute(TrecFeatures.preference, contarPalabras(args[0], " preference "))
                .setAttribute(TrecFeatures.preferences, contarPalabras(args[0], " preferences "))
                .setAttribute(TrecFeatures.president, contarPalabras(args[0], " president "))
                .setAttribute(TrecFeatures.presidential, contarPalabras(args[0], " presidential "))
                .setAttribute(TrecFeatures.pressure, contarPalabras(args[0], " pressure "))
                .setAttribute(TrecFeatures.pricing, contarPalabras(args[0], " pricing "))
                .setAttribute(TrecFeatures.principles, contarPalabras(args[0], " principles "))
                .setAttribute(TrecFeatures.print, contarPalabras(args[0], " print "))
                .setAttribute(TrecFeatures.probably, contarPalabras(args[0], " probably "))
                .setAttribute(TrecFeatures.process, contarPalabras(args[0], " process "))
                .setAttribute(TrecFeatures.produce, contarPalabras(args[0], " produce "))
                .setAttribute(TrecFeatures.programs, contarPalabras(args[0], " programs "))
                .setAttribute(TrecFeatures.project, contarPalabras(args[0], " project "))
                .setAttribute(TrecFeatures.property, contarPalabras(args[0], " property "))
                .setAttribute(TrecFeatures.provided, contarPalabras(args[0], " provided "))
                .setAttribute(TrecFeatures.provision, contarPalabras(args[0], " provision "))
                .setAttribute(TrecFeatures.provisions, contarPalabras(args[0], " provisions "))
                .setAttribute(TrecFeatures.push, contarPalabras(args[0], " push "))
                .setAttribute(TrecFeatures.question, contarPalabras(args[0], " question "))
                .setAttribute(TrecFeatures.questions, contarPalabras(args[0], " questions "))
                .setAttribute(TrecFeatures.quote, contarPalabras(args[0], " quote "))
                .setAttribute(TrecFeatures.rbind, contarPalabras(args[0], " rbind "))
                .setAttribute(TrecFeatures.readahead, contarPalabras(args[0], " readahead "))
                .setAttribute(TrecFeatures.reading, contarPalabras(args[0], " reading "))
                .setAttribute(TrecFeatures.reads, contarPalabras(args[0], " reads "))
                .setAttribute(TrecFeatures.reason, contarPalabras(args[0], " reason "))
                .setAttribute(TrecFeatures.reasons, contarPalabras(args[0], " reasons "))
                .setAttribute(TrecFeatures.receiving, contarPalabras(args[0], " receiving "))
                .setAttribute(TrecFeatures.recent, contarPalabras(args[0], " recent "))
                .setAttribute(TrecFeatures.recently, contarPalabras(args[0], " recently "))
                .setAttribute(TrecFeatures.regression, contarPalabras(args[0], " regression "))
                .setAttribute(TrecFeatures.related, contarPalabras(args[0], " related "))
                .setAttribute(TrecFeatures.relations, contarPalabras(args[0], " relations "))
                .setAttribute(TrecFeatures.release, contarPalabras(args[0], " release "))
                .setAttribute(TrecFeatures.remove, contarPalabras(args[0], " remove "))
                .setAttribute(TrecFeatures.replace, contarPalabras(args[0], " replace "))
                .setAttribute(TrecFeatures.reproducible, contarPalabras(args[0], " reproducible "))
                .setAttribute(TrecFeatures.republican, contarPalabras(args[0], " republican "))
                .setAttribute(TrecFeatures.request, contarPalabras(args[0], " request "))
                .setAttribute(TrecFeatures.requirements, contarPalabras(args[0], " requirements "))
                .setAttribute(TrecFeatures.research, contarPalabras(args[0], " research "))
                .setAttribute(TrecFeatures.reserved, contarPalabras(args[0], " reserved "))
                .setAttribute(TrecFeatures.resolve, contarPalabras(args[0], " resolve "))
                .setAttribute(TrecFeatures.restrictions, contarPalabras(args[0], " restrictions "))
                .setAttribute(TrecFeatures.returned, contarPalabras(args[0], " returned "))
                .setAttribute(TrecFeatures.rev, contarPalabras(args[0], " rev "))
                .setAttribute(TrecFeatures.review, contarPalabras(args[0], " review "))
                .setAttribute(TrecFeatures.revision, contarPalabras(args[0], " revision "))
                .setAttribute(TrecFeatures.rights, contarPalabras(args[0], " rights "))
                .setAttribute(TrecFeatures.road, contarPalabras(args[0], " road "))
                .setAttribute(TrecFeatures.room, contarPalabras(args[0], " room "))
                .setAttribute(TrecFeatures.row, contarPalabras(args[0], " row "))
                .setAttribute(TrecFeatures.rserve, contarPalabras(args[0], " rserve "))
                .setAttribute(TrecFeatures.rsize, contarPalabras(args[0], " rsize "))
                .setAttribute(TrecFeatures.samba, contarPalabras(args[0], " samba "))
                .setAttribute(TrecFeatures.sans, contarPalabras(args[0], " sans "))
                .setAttribute(TrecFeatures.sas, contarPalabras(args[0], " sas "))
                .setAttribute(TrecFeatures.saturday, contarPalabras(args[0], " saturday "))
                .setAttribute(TrecFeatures.script, contarPalabras(args[0], " script "))
                .setAttribute(TrecFeatures.security, contarPalabras(args[0], " security "))
                .setAttribute(TrecFeatures.seems, contarPalabras(args[0], " seems "))
                .setAttribute(TrecFeatures.select, contarPalabras(args[0], " select "))
                .setAttribute(TrecFeatures.senate, contarPalabras(args[0], " senate "))
                .setAttribute(TrecFeatures.separate, contarPalabras(args[0], " separate "))
                .setAttribute(TrecFeatures.server, contarPalabras(args[0], " server "))
                .setAttribute(TrecFeatures.settings, contarPalabras(args[0], " settings "))
                .setAttribute(TrecFeatures.shareholder, contarPalabras(args[0], " shareholder "))
                .setAttribute(TrecFeatures.sharpton, contarPalabras(args[0], " sharpton "))
                .setAttribute(TrecFeatures.sheet, contarPalabras(args[0], " sheet "))
                .setAttribute(TrecFeatures.showbiz, contarPalabras(args[0], " showbiz "))
                .setAttribute(TrecFeatures.shows, contarPalabras(args[0], " shows "))
                .setAttribute(TrecFeatures.similar, contarPalabras(args[0], " similar "))
                .setAttribute(TrecFeatures.simon, contarPalabras(args[0], " simon "))
                .setAttribute(TrecFeatures.simple, contarPalabras(args[0], " simple "))
                .setAttribute(TrecFeatures.single, contarPalabras(args[0], " single "))
                .setAttribute(TrecFeatures.sitelink, contarPalabras(args[0], " sitelink "))
                .setAttribute(TrecFeatures.smb, contarPalabras(args[0], " smb "))
                .setAttribute(TrecFeatures.snow, contarPalabras(args[0], " snow "))
                .setAttribute(TrecFeatures.solve, contarPalabras(args[0], " solve "))
                .setAttribute(TrecFeatures.someone, contarPalabras(args[0], " someone "))
                .setAttribute(TrecFeatures.spatstat, contarPalabras(args[0], " spatstat "))
                .setAttribute(TrecFeatures.specific, contarPalabras(args[0], " specific "))
                .setAttribute(TrecFeatures.sportsline, contarPalabras(args[0], " sportsline "))
                .setAttribute(TrecFeatures.standard, contarPalabras(args[0], " standard "))
                .setAttribute(TrecFeatures.statement, contarPalabras(args[0], " statement "))
                .setAttribute(TrecFeatures.statistical, contarPalabras(args[0], " statistical "))
                .setAttribute(TrecFeatures.stats, contarPalabras(args[0], " stats "))
                .setAttribute(TrecFeatures.stock, contarPalabras(args[0], " stock "))
                .setAttribute(TrecFeatures.stories, contarPalabras(args[0], " stories "))
                .setAttribute(TrecFeatures.story, contarPalabras(args[0], " story "))
                .setAttribute(TrecFeatures.storylink, contarPalabras(args[0], " storylink "))
                .setAttribute(TrecFeatures.string, contarPalabras(args[0], " string "))
                .setAttribute(TrecFeatures.struct, contarPalabras(args[0], " struct "))
                .setAttribute(TrecFeatures.student, contarPalabras(args[0], " student "))
                .setAttribute(TrecFeatures.subscribed, contarPalabras(args[0], " subscribed "))
                .setAttribute(TrecFeatures.sugar, contarPalabras(args[0], " sugar "))
                .setAttribute(TrecFeatures.suggest, contarPalabras(args[0], " suggest "))
                .setAttribute(TrecFeatures.summary, contarPalabras(args[0], " summary "))
                .setAttribute(TrecFeatures.sun, contarPalabras(args[0], " sun "))
                .setAttribute(TrecFeatures.sunday, contarPalabras(args[0], " sunday "))
                .setAttribute(TrecFeatures.sunny, contarPalabras(args[0], " sunny "))
                .setAttribute(TrecFeatures.sunshine, contarPalabras(args[0], " sunshine "))
                .setAttribute(TrecFeatures.systems, contarPalabras(args[0], " systems "))
                .setAttribute(TrecFeatures.tahoma, contarPalabras(args[0], " tahoma "))
                .setAttribute(TrecFeatures.takes, contarPalabras(args[0], " takes "))
                .setAttribute(TrecFeatures.td, contarPalabras(args[0], " td "))
                .setAttribute(TrecFeatures.team, contarPalabras(args[0], " team "))
                .setAttribute(TrecFeatures.term, contarPalabras(args[0], " term "))
                .setAttribute(TrecFeatures.terms, contarPalabras(args[0], " terms "))
                .setAttribute(TrecFeatures.test, contarPalabras(args[0], " test "))
                .setAttribute(TrecFeatures.tests, contarPalabras(args[0], " tests "))
                .setAttribute(TrecFeatures.therefore, contarPalabras(args[0], " therefore "))
                .setAttribute(TrecFeatures.thursday, contarPalabras(args[0], " thursday "))
                .setAttribute(TrecFeatures.ticket, contarPalabras(args[0], " ticket "))
                .setAttribute(TrecFeatures.title, contarPalabras(args[0], " title "))
                .setAttribute(TrecFeatures.todo, contarPalabras(args[0], " todo "))
                .setAttribute(TrecFeatures.tonight, contarPalabras(args[0], " tonight "))
                .setAttribute(TrecFeatures.tr, contarPalabras(args[0], " tr "))
                .setAttribute(TrecFeatures.trouble, contarPalabras(args[0], " trouble "))
                .setAttribute(TrecFeatures.type, contarPalabras(args[0], " type "))
                .setAttribute(TrecFeatures.uintval, contarPalabras(args[0], " uintval "))
                .setAttribute(TrecFeatures.understand, contarPalabras(args[0], " understand "))
                .setAttribute(TrecFeatures.understanding, contarPalabras(args[0], " understanding "))
                .setAttribute(TrecFeatures.une, contarPalabras(args[0], " une "))
                .setAttribute(TrecFeatures.university, contarPalabras(args[0], " university "))
                .setAttribute(TrecFeatures.unsigned, contarPalabras(args[0], " unsigned "))
                .setAttribute(TrecFeatures.unsubscribe, contarPalabras(args[0], " unsubscribe "))
                .setAttribute(TrecFeatures.update, contarPalabras(args[0], " update "))
                .setAttribute(TrecFeatures.uppercase, contarPalabras(args[0], " uppercase "))
                .setAttribute(TrecFeatures.usa, contarPalabras(args[0], " usa "))
                .setAttribute(TrecFeatures.useful, contarPalabras(args[0], " useful "))
                .setAttribute(TrecFeatures.users, contarPalabras(args[0], " users "))
                .setAttribute(TrecFeatures.ustr, contarPalabras(args[0], " ustr "))
                .setAttribute(TrecFeatures.utc, contarPalabras(args[0], " utc "))
                .setAttribute(TrecFeatures.utilities, contarPalabras(args[0], " utilities "))
                .setAttribute(TrecFeatures.utility, contarPalabras(args[0], " utility "))
                .setAttribute(TrecFeatures.valuation, contarPalabras(args[0], " valuation "))
                .setAttribute(TrecFeatures.value, contarPalabras(args[0], " value "))
                .setAttribute(TrecFeatures.values, contarPalabras(args[0], " values "))
                .setAttribute(TrecFeatures.var, contarPalabras(args[0], " var "))
                .setAttribute(TrecFeatures.variable, contarPalabras(args[0], " variable "))
                .setAttribute(TrecFeatures.variables, contarPalabras(args[0], " variables "))
                .setAttribute(TrecFeatures.version, contarPalabras(args[0], " version "))
                .setAttribute(TrecFeatures.via, contarPalabras(args[0], " via "))
                .setAttribute(TrecFeatures.victory, contarPalabras(args[0], " victory "))
                .setAttribute(TrecFeatures.video, contarPalabras(args[0], " video "))
                .setAttribute(TrecFeatures.view, contarPalabras(args[0], " view "))
                .setAttribute(TrecFeatures.visited, contarPalabras(args[0], " visited "))
                .setAttribute(TrecFeatures.vol, contarPalabras(args[0], " vol "))
                .setAttribute(TrecFeatures.w, contarPalabras(args[0], " w "))
                .setAttribute(TrecFeatures.warner, contarPalabras(args[0], " warner "))
                .setAttribute(TrecFeatures.washington, contarPalabras(args[0], " washington "))
                .setAttribute(TrecFeatures.ways, contarPalabras(args[0], " ways "))
                .setAttribute(TrecFeatures.weather, contarPalabras(args[0], " weather "))
                .setAttribute(TrecFeatures.websvn, contarPalabras(args[0], " websvn "))
                .setAttribute(TrecFeatures.weeks, contarPalabras(args[0], " weeks "))
                .setAttribute(TrecFeatures.whenever, contarPalabras(args[0], " whenever "))
                .setAttribute(TrecFeatures.width, contarPalabras(args[0], " width "))
                .setAttribute(TrecFeatures.win, contarPalabras(args[0], " win "))
                .setAttribute(TrecFeatures.worked, contarPalabras(args[0], " worked "))
                .setAttribute(TrecFeatures.working, contarPalabras(args[0], " working "))
                .setAttribute(TrecFeatures.writes, contarPalabras(args[0], " writes "))
                .setAttribute(TrecFeatures.written, contarPalabras(args[0], " written "))
                .setAttribute(TrecFeatures.wrong, contarPalabras(args[0], " wrong "))
                .setAttribute(TrecFeatures.wrote, contarPalabras(args[0], " wrote "))
                .setAttribute(TrecFeatures.x, contarPalabras(args[0], " x "))
                .setAttribute(TrecFeatures.york, contarPalabras(args[0], " york "))
                .setAttribute(TrecFeatures.zonk, contarPalabras(args[0], " zonk "))
                .build() ;

                //note: building training instances algorithmically is done in much the same way

                //now identify the class of the instance we built
                TrecClass c = decider.getDecision(i);
                System.out.println(c) ;

                //and get some details about how this decision was made 
                HashMap<TrecClass, Double> distributions = decider.getDecisionDistribution(i) ;
                for (Map.Entry<TrecClass, Double> e:distributions.entrySet()) 
                        System.out.println(e.getKey() + ": " + e.getValue()) ;            
        return c.toString();
        }
        
        public static int contarPalabras(String sTexto, String sTextoBuscado) {
    		int contador = 0;
    		while (sTexto.indexOf(sTextoBuscado) > -1) {
    		      sTexto = sTexto.substring(sTexto.indexOf(
    		        sTextoBuscado)+sTextoBuscado.length(),sTexto.length());
    		      contador++; 
    		}
    		return contador;
    	}
}